<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git常用命令</title>
    <url>/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h3 id="一-Git-工作机制"><a href="#一-Git-工作机制" class="headerlink" title="一. Git 工作机制"></a>一. Git 工作机制</h3><p>工作区-&gt;暂存区-&gt;本地库-&gt;代码托管中心（远程库）</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212221358671.png" alt="image-20221222135812581"></p>
<h3 id="二-Git-操作"><a href="#二-Git-操作" class="headerlink" title="二. Git 操作"></a>二. Git 操作</h3><h4 id="1-设置签名"><a href="#1-设置签名" class="headerlink" title="1.设置签名"></a>1.设置签名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -l	//查看配置</span><br><span class="line">git config --system --list	//查看系统级别配置</span><br><span class="line">git config --global --list	//查看当前用户配置</span><br><span class="line"></span><br><span class="line">git config --global user.name xxx    //设置名字</span><br><span class="line"></span><br><span class="line">git config --global user.email xxx   //设置邮箱</span><br></pre></td></tr></table></figure>
<p>C:\Users\用户名\.gitconfig 用户配置文件</p>
<h4 id="2-git命令"><a href="#2-git命令" class="headerlink" title="2.git命令"></a>2.git命令</h4><p>左键选中+中键：  直接复制粘贴</p>
<p>shift + ins ： 同上</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>git init</code></td>
<td>初始化工作区</td>
</tr>
<tr>
<td><code>git status</code></td>
<td>查看工作区状态</td>
</tr>
<tr>
<td><code>git add 文件名</code></td>
<td>将文件加入暂存区</td>
</tr>
<tr>
<td><code>git rm --cached 文件名</code></td>
<td>将文件从暂存区移除</td>
</tr>
<tr>
<td><code>git commit -m &quot;日志信息&quot; 文件名</code></td>
<td>将文件提交到本地库</td>
</tr>
<tr>
<td><code>git reflog</code></td>
<td>查看简化版本信息</td>
</tr>
<tr>
<td><code>git log</code></td>
<td>查看完整版本信息</td>
</tr>
<tr>
<td><code>git reset --hard 版本号</code></td>
<td>穿梭到哪个版本</td>
</tr>
</tbody></table>
<h4 id="3-git分支"><a href="#3-git分支" class="headerlink" title="3.git分支"></a>3.git分支</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>git branch -v</code></td>
<td>查看分支</td>
</tr>
<tr>
<td><code>git branch 分支名</code></td>
<td>创建分支</td>
</tr>
<tr>
<td><code>git checkout 分支名</code></td>
<td>切换到指定分支</td>
</tr>
<tr>
<td><code>git merge 分支名</code></td>
<td>将指定分支合并到当前分支</td>
</tr>
<tr>
<td><code>git branch -d 分支名</code></td>
<td>删除分支，分支包含更改未提交会被-d阻止，可以用-D强制删除</td>
</tr>
</tbody></table>
<p><strong>冲突合并</strong>：==同一个文件的同一个位置==有两种不同的修改</p>
<p>文件中会出现冲突信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">hello git!2222222222222</span><br><span class="line">hello git!3333333333333</span><br><span class="line">=======                     （===上面是当前代码，下面是要合并的代码）</span><br><span class="line">hello git!2222</span><br><span class="line">hello git!</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>自己手动修改，选取要保留的部分，删掉多余代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello git!3333333333333</span><br><span class="line">hello git!2222</span><br></pre></td></tr></table></figure>

<p>重新add 和commit</p>
<p>==注意：commit 不能后不能带文件名否则会报错==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;merge test&quot;  //不能带文件名</span><br></pre></td></tr></table></figure>
<p>成功合并后只会修改当前的分支，不会修改拿来合并的那个另一个分支</p>
<h3 id="四-github的使用"><a href="#四-github的使用" class="headerlink" title="四. github的使用"></a>四. github的使用</h3><p><code>ssh-keygen -t rsa</code> 用git生成公钥，放入github实现免密登录，秘钥在 <strong>用户名/.ssh/id_rsa.pub</strong> 文件中</p>
<p><code>git remote -v</code>  查看远程连接的库</p>
<p><code>git remote add 自定义名字 远程库链接</code>  新建远程库的连接</p>
<p><code>git push 名字/链接 本地分支名</code> 推送分支</p>
<p><code>git pull 名字/链接 远程分支名</code>  拉取分支</p>
<p><code>git pull 仓库名字/链接 --allow-unrelated-histories</code> 强行拉取合并(当远程库有本地库没有的文件时)</p>
<p><code>git clone 名字/链接</code>  克隆仓库</p>
<p><code>git clone 分支名 名字/链接</code>  克隆仓库</p>
<div style="color:#999;background-color:lightyellow;padding:10px;border-left:4px solid #686">小贴士：git推送分支的完整写法是 <p style="color:#000">git push origin 本地分支名:远程分支名</p> 我们通常会省略远程分支名，这样GitHub会自动创建一个同名的分支，我们也可以指定这个需要推送到的远程分支名。</div>





<h3 id="五-gitignore文件的使用"><a href="#五-gitignore文件的使用" class="headerlink" title="五. gitignore文件的使用"></a>五. gitignore文件的使用</h3><p>在git工程下面可以创建一个**.gitignore<strong>文件，里面可以设置，提交到暂存区时</strong>忽略**哪些文件，即哪些文件不传到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#基本的语法</span><br><span class="line">#	井号为注释</span><br><span class="line"></span><br><span class="line">*.txt	#忽略所有的txt文件</span><br><span class="line">!lib.txt	#除了lib.txt以外的都忽略</span><br><span class="line">/temp	#忽略temp文件夹</span><br><span class="line">build/	#忽略build文件夹下的所有文件</span><br><span class="line">build/*.txt	#忽略build文件夹下的txt文件</span><br></pre></td></tr></table></figure>



<h3 id="六-工作流程梳理"><a href="#六-工作流程梳理" class="headerlink" title="六. 工作流程梳理"></a>六. 工作流程梳理</h3><ol>
<li>git先初始化用户名和邮箱，没有公钥的先生成公钥，在github里添加公钥。</li>
<li>创建一个git工程，使用<code>git init</code>或者<code>git clone</code>。同时github中新建一个仓库。</li>
<li>当文件修改好了需要提交的时候，先<code>git add .</code>到暂存区，再<code>git commit -m &quot;日志信息&quot; .</code> 到本地库。</li>
<li>复制github仓库链接，用<code>remote add 别名 链接</code>添加库的别名，方便后续使用。</li>
<li>用<code>git push 别名/链接 本地分支 </code>来把指定分支的代码推送到github仓库。</li>
</ol>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitHub</tag>
        <tag>实用工具</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS常见布局</title>
    <url>/%E5%89%8D%E7%AB%AF/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="CSS常见布局"><a href="#CSS常见布局" class="headerlink" title="CSS常见布局"></a>CSS常见布局</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li>flex弹性布局</li>
<li>grid网格布局</li>
<li>移动端适配布局</li>
<li>响应式布局</li>
</ol>
<h2 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h2><p> 适合单列的布局</p>
<h3 id="1-设置flex容器"><a href="#1-设置flex容器" class="headerlink" title="1.设置flex容器"></a>1.设置flex容器</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><ul>
<li> <code>display:flex</code>声明<strong>父容器</strong>是弹性盒子,扩展至所有有效宽度</li>
<li> <code>display:inline-flex</code> 收缩至内容宽度</li>
</ul>
<h4 id="设置排列方向"><a href="#设置排列方向" class="headerlink" title="设置排列方向"></a>设置排列方向</h4><ul>
<li> <code>flex-direction</code> 设置排列方向：</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>row</td>
<td>从左到右水平排列子元素（默认值）</td>
</tr>
<tr>
<td>column</td>
<td>从上到下垂直排列子元素</td>
</tr>
<tr>
<td>row-reverse</td>
<td>从右向左排列子元素</td>
</tr>
<tr>
<td>column-reverse</td>
<td>从下到上垂直排列子元素</td>
</tr>
</tbody></table>
<h4 id="溢出处理"><a href="#溢出处理" class="headerlink" title="溢出处理"></a>溢出处理</h4><ul>
<li><code>flex-wrap</code> 进行溢出处理，是否换行</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nowrap</td>
<td>弹性容器为单行，会溢出（默认值）</td>
</tr>
<tr>
<td>wrap</td>
<td>弹性容器为多行，会自动换行</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>反转 wrap 排列。</td>
</tr>
</tbody></table>
<h4 id="设置主轴方向上的对齐方式。"><a href="#设置主轴方向上的对齐方式。" class="headerlink" title="设置主轴方向上的对齐方式。"></a>设置主轴方向上的对齐方式。</h4><p><code>justify-content</code> 属性</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>弹性项目向行头紧挨着填充。（默认值）</td>
</tr>
<tr>
<td>flex-end</td>
<td>弹性项目向行尾紧挨着填充。</td>
</tr>
<tr>
<td>center</td>
<td>弹性项目居中紧挨着填充。</td>
</tr>
<tr>
<td>space-between</td>
<td>弹性项目平均分布在该行上,两边顶满。</td>
</tr>
<tr>
<td>space-around</td>
<td>弹性项目平均分布在该行上，两边留有一半的间隔空间。</td>
</tr>
<tr>
<td>space-evenly</td>
<td>弹性项目平均分布在该行上，两边留有相等的间隔空间。</td>
</tr>
<tr>
<td><img src="https://s2.loli.net/2022/05/10/ZmcCQTLWJbeHzR3.png"></td>
<td></td>
</tr>
</tbody></table>
<h4 id="设置子元素在侧轴上的对齐方式"><a href="#设置子元素在侧轴上的对齐方式" class="headerlink" title="设置子元素在侧轴上的对齐方式"></a>设置子元素在侧轴上的对齐方式</h4><p><code>align-items</code> 属性</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>stretch</td>
<td>使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制（默认值）</td>
</tr>
<tr>
<td>flex-start</td>
<td>子元素的侧轴起始位置的边界紧靠住该行的侧轴起始边界。</td>
</tr>
<tr>
<td>flex-end</td>
<td>子元素的侧轴起始位置的边界紧靠住该行的侧轴结束边界。</td>
</tr>
<tr>
<td>center</td>
<td>弹性盒子元素在该行的侧轴上居中放置</td>
</tr>
<tr>
<td>baseline</td>
<td>如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</td>
</tr>
</tbody></table>
<p><img src="https://s2.loli.net/2022/05/10/4GfilmZ1uIXpFKb.png"></p>
<h4 id="设置各个行的对齐"><a href="#设置各个行的对齐" class="headerlink" title="设置各个行的对齐"></a>设置各个行的对齐</h4><p><code>align-content</code> 属性</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>stretch</td>
<td>各行将会伸展以占用剩余的空间。（默认值）</td>
</tr>
<tr>
<td>flex-start</td>
<td>各行向弹性盒容器的起始位置堆叠。</td>
</tr>
<tr>
<td>flex-end</td>
<td>各行向弹性盒容器的结束位置堆叠。</td>
</tr>
<tr>
<td>center</td>
<td>各行向弹性盒容器的中间位置堆叠。</td>
</tr>
<tr>
<td>space-between</td>
<td>各行在弹性盒容器中平均分布，两端顶满。</td>
</tr>
<tr>
<td>space-around</td>
<td>各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。</td>
</tr>
<tr>
<td><img src="https://s2.loli.net/2022/05/10/OA4x3rnb8TIK1J7.png"></td>
<td></td>
</tr>
</tbody></table>
<h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><p><code>flex-flow</code> 属性：flex-direction 和 flex-wrap 属性的缩写形式，默认是 row nowrap。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;</span><br></pre></td></tr></table></figure>



<h3 id="2-设置flex子项"><a href="#2-设置flex子项" class="headerlink" title="2.设置flex子项"></a>2.设置flex子项</h3><h4 id="设置顺序"><a href="#设置顺序" class="headerlink" title="设置顺序"></a>设置顺序</h4><p><code>order</code> 属性，值为数字，数字越小排越前面，允许负值</p>
<h4 id="单个子项居中"><a href="#单个子项居中" class="headerlink" title="单个子项居中"></a>单个子项居中</h4><p>设置<code>margin: auto</code></p>
<h4 id="单独某个子项垂直对齐方式"><a href="#单独某个子项垂直对齐方式" class="headerlink" title="单独某个子项垂直对齐方式"></a>单独某个子项垂直对齐方式</h4><p><code>align-self</code> </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch</span><br></pre></td></tr></table></figure>

<h4 id="可用剩余空间时拉伸比例"><a href="#可用剩余空间时拉伸比例" class="headerlink" title="可用剩余空间时拉伸比例"></a>可用剩余空间时拉伸比例</h4><p><code>flex-grow</code> ,默认值为0。将剩余空间，按每个子项的比例分配给子项。</p>
<h4 id="定义了子项的收缩的能力"><a href="#定义了子项的收缩的能力" class="headerlink" title="定义了子项的收缩的能力"></a>定义了子项的收缩的能力</h4><p><code>flex-shrink</code>,默认值为1，决定 flex 项允许收缩多少比例。</p>
<h4 id="设置子项在主轴方向的默认大小"><a href="#设置子项在主轴方向的默认大小" class="headerlink" title="设置子项在主轴方向的默认大小"></a>设置子项在主轴方向的默认大小</h4><p><code>flex-basis</code> ,默认值auto</p>
<h4 id="简写-1"><a href="#简写-1" class="headerlink" title="简写"></a>简写</h4><p><code>flex</code> 用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flex: none | [ &lt; &#x27;flex-grow&#x27;&gt; &lt; &#x27;flex-shrink&#x27;&gt;? || &lt; &#x27;flex-basis&#x27;&gt; ]</span><br><span class="line">//第二三个参数可选</span><br></pre></td></tr></table></figure>
<h3 id="3-应用"><a href="#3-应用" class="headerlink" title="3.应用"></a>3.应用</h3><ul>
<li>两列等高布局：两列元素，一列内容变多，另一列跟着拉伸。父盒子为flex，左右列的盒子默认stretch，因此会自动拉伸。</li>
<li>不定项居中：设置<code>justify-content: center;  align-items: flex-end;</code>,比如轮播图下面的小圆点。</li>
<li>两列或三列布局：其中一列会自己调整宽度，父盒子为flex，然后要自适应的一列设置grow为1，就会自动填充剩余空间。</li>
<li>溢出项布局：如轮播图，直接设置flex盒子，默认一行会溢出</li>
<li>子项分组布局：当子元素总宽度不及父盒子时，为其中一个子元素设置margin为auto，可以将剩余空间自动分配为外边距。</li>
</ul>
<h2 id="grid网格布局"><a href="#grid网格布局" class="headerlink" title="grid网格布局"></a>grid网格布局</h2><p>适合多列网格布局<br><img src="https://s2.loli.net/2022/05/11/dsMUiJkq29IPxYQ.png"></p>
<h3 id="1-设置grid容器"><a href="#1-设置grid容器" class="headerlink" title="1.设置grid容器"></a>1.设置grid容器</h3><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><p><code>display:grid</code>  只创建了一个只有一列的网格,网页并不会马上发生变化,需要设置</p>
<h4 id="fr单位"><a href="#fr单位" class="headerlink" title="fr单位"></a>fr单位</h4><p>fr单位规定了可用空间的分配比例</p>
<h4 id="定义网格"><a href="#定义网格" class="headerlink" title="定义网格"></a>定义网格</h4><ul>
<li><code>grid-template-columns: 1fr 1fr 1fr</code> 设置列数和大小</li>
<li><code>grid-template-rows: 1fr 1fr 1fr</code> 设置行数和大小</li>
<li><code>grid-template-areas</code> 合并单元格，使用如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在父盒子中设置区域</span><br><span class="line">.grid-father&#123;</span><br><span class="line">    grid-template-areas:&quot;a1,a1,a2&quot;</span><br><span class="line">                        &quot;a1,a1,a2&quot;</span><br><span class="line">                        &quot;a3,a3,a2&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">.child&#123;</span><br><span class="line">    grid-area: a1;  //在子盒子中生效 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>grid盒子里的子盒子会按上面的设置自动填充进盒子里去，相当于设置了一个模板，往里面填盒子</p>
<p><strong>简写</strong></p>
<p>使用<code>grid-template:</code> 进行简写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-template: </span><br><span class="line">            &quot;a1 a1 a2&quot; 1fr   //每一行后面跟着的是行rows的单位</span><br><span class="line">            &quot;a1 a1 a2&quot; 1fr</span><br><span class="line">            &quot;a3 a3 a3&quot; 1fr</span><br><span class="line">            / 100px 100px 100px;  //最后一行是列columns的单位（记得斜线）</span><br></pre></td></tr></table></figure>
<h4 id="网格间隙"><a href="#网格间隙" class="headerlink" title="网格间隙"></a>网格间隙</h4><ul>
<li><code>grid-column-gap</code> 列间隙</li>
<li><code>grid-row-gap</code>  行间隙</li>
<li><code>grid-gap</code>  复合写法，先写行row，再写列column</li>
</ul>
<p>现在更推荐</p>
<ul>
<li><code>column-gap</code></li>
<li><code>row-gap</code></li>
<li><code>gap</code></li>
</ul>
<h4 id="网格对齐方式"><a href="#网格对齐方式" class="headerlink" title="网格对齐方式"></a>网格对齐方式</h4><ul>
<li><code>justify-items</code> 水平方向，子项在自己单元格里的对齐方式</li>
<li><code>align-items</code>  垂直方向，子项在自己单元格里的对齐方式</li>
<li>参数有 start/end/center 默认stret</li>
<li><code>place-items</code> 复合写法 垂直 水平</li>
</ul>
<ul>
<li><code>justify-content</code> 水平方向</li>
<li><code>align-content</code>  垂直方向</li>
<li>上述两个属性，设置网格整体（模板），相对父盒子的位置</li>
<li>属性有start/end/center/space-between/space-around/space-evenly 默认stretch</li>
<li><code>place-content</code>  复合写法  垂直 水平</li>
</ul>
<p>以上设置==网格小于容器==才能看到效果</p>
<h4 id="隐式网格的设置"><a href="#隐式网格的设置" class="headerlink" title="隐式网格的设置"></a>隐式网格的设置</h4><p>当子项溢出时，会自动布局新网格，就是隐式网格</p>
<ul>
<li><code>grid-auto-flow</code>  属性控制着自动布局算法怎样运作</li>
<li><code>grid-auto-columns</code>  指定了隐式创建的网格纵向轨道（track）的宽度</li>
<li><code>grid-auto-rows</code>   设置网格中行的默认尺寸</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-auto-flow: row;    //在必要时增加新行(默认)</span><br><span class="line">grid-auto-flow: column;     //在必要时增加新列</span><br><span class="line">grid-auto-flow: dense;  //如果后面出现了稍小的元素，则会试图去填充网格中前面留下的空白。可能导致原来出现的次序被打乱</span><br><span class="line">grid-auto-flow: row dense;</span><br><span class="line">grid-auto-flow: column dense;</span><br></pre></td></tr></table></figure>


<h3 id="2-设置grid子项"><a href="#2-设置grid子项" class="headerlink" title="2.设置grid子项"></a>2.设置grid子项</h3><h4 id="基于线的元素放置"><a href="#基于线的元素放置" class="headerlink" title="基于线的元素放置"></a>基于线的元素放置</h4><p><strong>线</strong>：即开篇图片中编了序号123…的线（间隙所在的位置），从1开始编号命名，n行就n+1条线</p>
<p>用以下几个属性可以设置子项的起始位置(基于线)</p>
<ul>
<li><code>grid-column-start</code> 属性：单元格左边框所在的垂直网格线</li>
<li><code>grid-column-end</code> 属性：单元格右边框所在的垂直网格线</li>
<li><code>grid-row-start</code> 属性：单元格上边框所在的水平网格线</li>
<li><code>grid-row-end</code> 属性：单元格下边框所在的水平网格线</li>
</ul>
<p>后面跟线的编号数字</p>
<p>==注意==：只设置前一个盒子的grid-column，后面的盒子会放入前一个盒子后面的格子，因为grid-row默认是auto。如果设定了grid-row，就明确了位置，其他盒子会自动从第一个格子开始排列。</p>
<p>grid-template还可以给线<strong>命名</strong>：</p>
<ul>
<li><code>grid-template-columns: [col1] 1fr [col2] 1fr [col3] 1fr [col4]</code> 用中括号设置线的名称。命名就可以代替上面四个属性的数字参数</li>
</ul>
<p><strong>简写</strong>：</p>
<ul>
<li><code>grid-column: 2/4</code> <code>grid-row: 2/3;</code>用斜线分割  起始/结束</li>
<li><code>grid-column: span 2/span 2;</code> 表示行列占据两格</li>
<li><code>grid-area: 2/2/4/3;</code> grid-column-start/rid-row-start/grid-column-end/grid-row-end</li>
<li><code>grid-area: 1/1/span 2/span 2;</code> 表示行列从基线1开始，上下占据两格</li>
</ul>
<p>grid-area既可以用命名设置子项，也可以用基线设置</p>
<h4 id="子项对齐方式"><a href="#子项对齐方式" class="headerlink" title="子项对齐方式"></a>子项对齐方式</h4><p>操作某一个子项</p>
<ul>
<li><code>justify-self</code></li>
<li><code>align-self</code></li>
</ul>
<h3 id="3-网格相关方法"><a href="#3-网格相关方法" class="headerlink" title="3.网格相关方法"></a>3.网格相关方法</h3><p>repeat(number,size)</p>
<ul>
<li> <code>grid-template-columns:repeat(5,100px);</code> 设置五个重复的列，每个100px</li>
<li> <code>grid-template-columns:repeat(auto-fill,100px);</code> 根据父容器大小，自动设置列数</li>
</ul>
<p>minmax(min,max)</p>
<ul>
<li><code>grid-template-columns:100px minmax(100px,1fr) 100px;</code> 设定最小值为100px，最大值自适应。</li>
<li>复合用法<code>grid-template-column:repeat(auto-fill,minmax(200px,1fr));</code></li>
</ul>
<h3 id="4-应用"><a href="#4-应用" class="headerlink" title="4.应用"></a>4.应用</h3><ol>
<li>==叠加布局==：用<code>grid-area</code>将几个盒子装进同一个格子，再用<code>align-self</code>和<code>justif-self</code>对每个盒子单独定位。</li>
<li>==多组合布局==：直接利用盒子的特性即可。</li>
<li>==栅格布局==：父容器设置<code>grid-template-columns:repeat(12,1fr)</code> 即划分12个栅格，子容器用<code>grid-area: auto/auto/auto/1</code> 控制跨越几个栅格（最后数字是几就跨过几个栅格）</li>
<li>==容器行列自适应布局==: 利用子项溢出会自动产生隐式网格折行，控制<code>grid-auto-flow</code> 就可以控制行(默认row)还是列(column)的自适应</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>网页布局</tag>
        <tag>CSS</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/LInux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="vim常用操作"><a href="#vim常用操作" class="headerlink" title="vim常用操作"></a>vim常用操作</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>vim 文件名</code></td>
<td>用vim打开该文件</td>
</tr>
<tr>
<td><code>i I o O a A r R</code></td>
<td>进入编辑模式</td>
</tr>
<tr>
<td><code>esc</code></td>
<td>回退到一般模式</td>
</tr>
<tr>
<td><code>:</code></td>
<td>进入命令行模式</td>
</tr>
<tr>
<td><code>:wq</code></td>
<td>保存并退出</td>
</tr>
<tr>
<td><code>:q</code></td>
<td>退出</td>
</tr>
<tr>
<td><code>:q!</code></td>
<td>强制退出不保存</td>
</tr>
<tr>
<td><code>yy</code></td>
<td>复制行</td>
</tr>
<tr>
<td><code>yy5</code></td>
<td>复制包括当前行向下五行</td>
</tr>
<tr>
<td><code>p</code></td>
<td>粘贴</td>
</tr>
<tr>
<td><code>dd</code></td>
<td>删除行</td>
</tr>
<tr>
<td><code>/关键词</code></td>
<td>查找该关键词，<code>n</code>查找下一个 <code>N</code>查找上一个</td>
</tr>
<tr>
<td><code>:set nu</code></td>
<td>设置显示行号</td>
</tr>
<tr>
<td><code>:set nonu</code></td>
<td>取消文件行号</td>
</tr>
<tr>
<td><code>G</code></td>
<td>一般模式下定位到最末行</td>
</tr>
<tr>
<td><code>gg</code></td>
<td>一般模式下定位到最首行</td>
</tr>
<tr>
<td><code>u</code></td>
<td>一般模式下撤回</td>
</tr>
<tr>
<td><code>0或者Home</code></td>
<td>定位到行首</td>
</tr>
<tr>
<td><code>&#39;$&#39;或者End</code></td>
<td>定位到行末</td>
</tr>
<tr>
<td><code>Ctrl+f</code></td>
<td>向下移动一页</td>
</tr>
<tr>
<td><code>Ctrl+b</code></td>
<td>向上移动一页</td>
</tr>
<tr>
<td><code>n Enter</code></td>
<td>n为数字，光标向下移动n行</td>
</tr>
</tbody></table>
<h2 id="一-基础操作"><a href="#一-基础操作" class="headerlink" title="一.基础操作"></a>一.基础操作</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>shutdown -h now</code></td>
<td>立马关机</td>
</tr>
<tr>
<td><code>shutdown -h 2</code></td>
<td>一分钟后关机</td>
</tr>
<tr>
<td><code>shutdown -r now</code></td>
<td>立马重启计算机</td>
</tr>
<tr>
<td><code>halt</code></td>
<td>关机</td>
</tr>
<tr>
<td><code>reboot</code></td>
<td>重启</td>
</tr>
<tr>
<td><code>sync</code></td>
<td>内存数据同步到磁盘</td>
</tr>
<tr>
<td><code>shutdown -h now</code></td>
<td>立马关机</td>
</tr>
<tr>
<td><code>shutdown -h 2</code></td>
<td>一分钟后关机</td>
</tr>
<tr>
<td><code>clear</code></td>
<td>清屏</td>
</tr>
<tr>
<td><code>ifconfig -a</code></td>
<td>可以查看ip</td>
</tr>
</tbody></table>
<h2 id="二-用户管理"><a href="#二-用户管理" class="headerlink" title="二.用户管理"></a>二.用户管理</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>su - 用户名</code></td>
<td>切换到指定用户</td>
</tr>
<tr>
<td><code>logout</code></td>
<td>注销用户（级别3下才有效）</td>
</tr>
<tr>
<td><code>useradd</code></td>
<td>添加用户（同时新建一个同名的组加入）</td>
</tr>
<tr>
<td><code>useradd -d 目录名</code></td>
<td>给新用户指定家目录</td>
</tr>
<tr>
<td><code>passwd 用户名</code></td>
<td>给指定用户改密码</td>
</tr>
<tr>
<td><code>userdel 用户名</code></td>
<td>删除指定用户（保留家目录）</td>
</tr>
<tr>
<td><code>userdel -r 用户名</code></td>
<td>删除指定用户及其家目录</td>
</tr>
<tr>
<td><code>id 用户名</code></td>
<td>查询指定用户信息</td>
</tr>
<tr>
<td><code>whoami/who am i</code></td>
<td>查看当前用户信息（后者信息详尽）</td>
</tr>
<tr>
<td><code>groupadd 组名</code></td>
<td>新增一个用户组</td>
</tr>
<tr>
<td><code>groupdel 组名</code></td>
<td>删除指定组名</td>
</tr>
<tr>
<td><code>useradd -g 用户组 用户名</code></td>
<td>增加用户同时分组</td>
</tr>
<tr>
<td><code>usermod -g 用户组 用户名</code></td>
<td>修改用户组</td>
</tr>
</tbody></table>
<p>小贴士：</p>
<p>/etc/shadow 口令配置文件</p>
<p>/etc/group 组信息文件</p>
<h2 id="三-帮助指令"><a href="#三-帮助指令" class="headerlink" title="三.帮助指令"></a>三.帮助指令</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>man 命令或配置文件</code></td>
<td>获得帮助信息（如：man ls）</td>
</tr>
<tr>
<td><code>help 命令</code></td>
<td>获得shell内置命令的帮助信息</td>
</tr>
<tr>
<td>谷歌百度</td>
<td>方便易懂</td>
</tr>
</tbody></table>
<h2 id="四-文件管理指令"><a href="#四-文件管理指令" class="headerlink" title="四.文件管理指令"></a>四.文件管理指令</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>pwd</code></td>
<td>显示当前工作目录的绝对路径</td>
</tr>
<tr>
<td><code>ls 目录</code></td>
<td>显示文件目录</td>
</tr>
<tr>
<td><code>ls -a 目录</code></td>
<td>显示所有的目录(包括隐藏的)</td>
</tr>
<tr>
<td><code>ls -l 目录</code></td>
<td>以列表方式显示（信息详细）</td>
</tr>
<tr>
<td><code>ls -al 目录</code></td>
<td>前两个指令组合</td>
</tr>
<tr>
<td><code>ls -lh 目录</code></td>
<td>加入h按照更适合人的阅读方式展示</td>
</tr>
<tr>
<td><code>cd 目录</code></td>
<td>切换到指定目录</td>
</tr>
<tr>
<td><code>cd~ / cd:</code></td>
<td>切换到家目录</td>
</tr>
<tr>
<td><code>cd ..</code></td>
<td>返回上一级</td>
</tr>
<tr>
<td><code>mkdir 目录名</code></td>
<td>创建目录</td>
</tr>
<tr>
<td><code>mkdir -p 目录名</code></td>
<td>创建多级目录（如：mkdir -p /home/animal/tiger）</td>
</tr>
<tr>
<td><code>rmdir 目录名</code></td>
<td>只能删除空目录</td>
</tr>
<tr>
<td><code>touch 文件名（包括后缀）</code></td>
<td>创建一个空文件</td>
</tr>
<tr>
<td><code>cp 源 指定目录</code></td>
<td>将指定文件复制到指定位置</td>
</tr>
<tr>
<td><code>cp -r 源 指定目录</code></td>
<td>递归的复制整个文件夹</td>
</tr>
<tr>
<td><code>\cp -r 源 指定目录</code></td>
<td>强制覆盖不提示</td>
</tr>
<tr>
<td><code>rm 文件或目录</code></td>
<td>移除指定文件或目录</td>
</tr>
<tr>
<td><code>rm -r 目录</code></td>
<td>递归的移除整个目录</td>
</tr>
<tr>
<td><code>rm -f 文件或目录</code></td>
<td>强制删除不提示</td>
</tr>
<tr>
<td><code>rm -rf 目录</code></td>
<td>强制删除整个文件夹不提示</td>
</tr>
<tr>
<td><code>mv 老文件名 新文件名</code></td>
<td>重命名</td>
</tr>
<tr>
<td><code>mv 源目录 目标目录</code></td>
<td>把指定目录移动到指定位置（剪切）</td>
</tr>
<tr>
<td><code>cat 文件名</code></td>
<td>查看文件内容（只读）</td>
</tr>
<tr>
<td><code>cat -n 文件名</code></td>
<td>查看文件内容带上行号</td>
</tr>
<tr>
<td><code>more 文件名</code></td>
<td>全屏幕查看文件内容 （一次性全部展示）</td>
</tr>
<tr>
<td><code>less 文件名</code></td>
<td>分屏查看文件内容（动态展示需要部分，效率高）</td>
</tr>
<tr>
<td>`cat -n 文件名</td>
<td>more`</td>
</tr>
<tr>
<td><code>echo 环境变量</code></td>
<td>输出内容到控制台（如 echo $PATH）</td>
</tr>
<tr>
<td><code>echo 文本</code></td>
<td>输出文本到控制台（如 echo “Hello”）</td>
</tr>
<tr>
<td><code>head 文件名</code></td>
<td>查看文件前十行</td>
</tr>
<tr>
<td><code>head -n 5文件名</code></td>
<td>查看文件前五行</td>
</tr>
<tr>
<td><code>tail 文件名</code></td>
<td>查看文件后十行</td>
</tr>
<tr>
<td><code>tail -n 5 文件名</code></td>
<td>查看文件后五行</td>
</tr>
<tr>
<td><code>tail -f 文件名</code></td>
<td>追踪该文档的更新（Ctrl+c退出该模式）</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>重定向覆盖到新文件（如 ls -l &gt; /文件.txt）</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>追加到指定文件末尾（如 cat 文件1.txt &gt;&gt; 文件2.txt）</td>
</tr>
<tr>
<td><code>ln -s 源文件或目录 软链接名</code></td>
<td>给源文件创建一软链接（快捷方式），可用rm删除</td>
</tr>
<tr>
<td><code>history</code></td>
<td>查看执行过的历史命令</td>
</tr>
<tr>
<td><code>history 10</code></td>
<td>查看最近十条历史命令</td>
</tr>
<tr>
<td><code>!45</code></td>
<td>执行第45条历史命令</td>
</tr>
</tbody></table>
<h3 id="more和less操作详解"><a href="#more和less操作详解" class="headerlink" title="more和less操作详解"></a>more和less操作详解</h3><table>
<thead>
<tr>
<th>more操作</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>空格</code></td>
<td>向下翻一页</td>
</tr>
<tr>
<td><code>Enter</code></td>
<td>向下翻一行</td>
</tr>
<tr>
<td><code>=</code></td>
<td>输出当前行号</td>
</tr>
<tr>
<td><code>:f</code></td>
<td>输出文件名和当前行号</td>
</tr>
<tr>
<td><code>Ctrl+b</code></td>
<td>返回上一屏</td>
</tr>
<tr>
<td><code>Ctrl+f</code></td>
<td>向下滚动一屏</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>less操作</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>空格</code></td>
<td>向下翻一页</td>
</tr>
<tr>
<td><code>Enter</code></td>
<td>向下翻一行</td>
</tr>
<tr>
<td><code>/字符串</code></td>
<td>向下搜索字串，n向下查找，N向上查找</td>
</tr>
<tr>
<td><code>?字符串</code></td>
<td>向上搜索字串，n向下查找，N向上查找</td>
</tr>
<tr>
<td><code>PgUp</code></td>
<td>返回上一屏</td>
</tr>
<tr>
<td><code>PgDn</code></td>
<td>向下滚动一屏</td>
</tr>
</tbody></table>
<h2 id="五-时间日期类"><a href="#五-时间日期类" class="headerlink" title="五.时间日期类"></a>五.时间日期类</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>date</code></td>
<td>显示当前时间</td>
</tr>
<tr>
<td><code>date +%Y</code></td>
<td>只显示年</td>
</tr>
<tr>
<td><code>date +%m</code></td>
<td>只显示月</td>
</tr>
<tr>
<td><code>date +%d</code></td>
<td>只显示日</td>
</tr>
<tr>
<td><code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code></td>
<td>按指定格式显示日期</td>
</tr>
<tr>
<td><code>date -s 字符串时间</code></td>
<td>修改时间（如 date -s 2022/9/5 18:17:22）</td>
</tr>
<tr>
<td><code>cal</code></td>
<td>显示当月日历</td>
</tr>
<tr>
<td><code>cal 2020</code></td>
<td>显示2020年正年的日历</td>
</tr>
</tbody></table>
<h2 id="六-查找和检索"><a href="#六-查找和检索" class="headerlink" title="六.查找和检索"></a>六.查找和检索</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>find 目录 -name 文件名</code></td>
<td>在指定目录下按文件名查找文件</td>
</tr>
<tr>
<td><code>find 目录 -size +220M</code></td>
<td>按文件大小查找文件（+大于，-小于，不写等于）</td>
</tr>
<tr>
<td><code>locate 文件名</code></td>
<td>根据数据库查找文件，先用<code>updatedb</code>更新数据库</td>
</tr>
<tr>
<td><code>which 指令</code></td>
<td>查找指令在哪个目录下</td>
</tr>
<tr>
<td><code>grep -选项 查找内容 源文件</code></td>
<td>过滤查找，-n显示行号，-i不分大小写</td>
</tr>
<tr>
<td>`cat 文件名</td>
<td>grep -n  “目标内容”`</td>
</tr>
</tbody></table>
<h2 id="七-解压缩"><a href="#七-解压缩" class="headerlink" title="七.解压缩"></a>七.解压缩</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>gzip 文件名</code></td>
<td>压缩文件（不能压缩文件夹）</td>
</tr>
<tr>
<td><code>gunzip 文件.gz</code></td>
<td>解压.gz文件</td>
</tr>
<tr>
<td><code>zip -r xxx.zip 目标内容</code></td>
<td>可以递归压缩文件夹，也可压缩文件到指定zip文件</td>
</tr>
<tr>
<td><code>unzip -d 目标路径 zip文件名</code></td>
<td>解压指定zip文件到指定目录</td>
</tr>
</tbody></table>
<h3 id="tar用法"><a href="#tar用法" class="headerlink" title="tar用法"></a>tar用法</h3><table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>-c</code></td>
<td>产生.tar打包文件</td>
</tr>
<tr>
<td><code>-v</code></td>
<td>显示详情</td>
</tr>
<tr>
<td><code>-f</code></td>
<td>指定压缩后文件名，后面空格紧跟参数</td>
</tr>
<tr>
<td><code>-z</code></td>
<td>用zip程序压缩或者解压</td>
</tr>
<tr>
<td><code>-x</code></td>
<td>解包展开.tar文件</td>
</tr>
<tr>
<td><code>-C</code></td>
<td>设置目标路径</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>tar -zcvf xxx.tar.gz 要打包的内容</code></td>
<td>产生.tar打包文件</td>
</tr>
<tr>
<td><code>tar -zxvf xxx.tar.gz</code></td>
<td>解包</td>
</tr>
<tr>
<td><code>tar -zxvf xxx.tar.gz -C 要解压到的目录</code></td>
<td>解压到指定的目录</td>
</tr>
</tbody></table>
<h2 id="八-权限和组管理"><a href="#八-权限和组管理" class="headerlink" title="八.权限和组管理"></a>八.权限和组管理</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>ls -ahl</code></td>
<td>用人类列表的方式查看所有文件</td>
</tr>
<tr>
<td><code>chown 用户名 文件名</code></td>
<td>修改文件所有者</td>
</tr>
<tr>
<td><code>chown -R 用户名:组名 文件夹</code></td>
<td>修改文件夹包括里面所有内容的所有者和组</td>
</tr>
<tr>
<td><code>groupadd 组名</code></td>
<td>添加组</td>
</tr>
<tr>
<td><code>chgrp 组名 文件名</code></td>
<td>修改文件所在组</td>
</tr>
<tr>
<td><code>usermod -g 新组名 用户名</code></td>
<td>改变用户所在组</td>
</tr>
<tr>
<td><code>usermod -d 目录名 用户名</code></td>
<td>改变用户登录的初始目录</td>
</tr>
<tr>
<td><code>chmod u=rwx,g=rw,o=x 文件/目录名</code></td>
<td>修改文件或文件夹权限</td>
</tr>
</tbody></table>
<h2 id="九-定时任务调度"><a href="#九-定时任务调度" class="headerlink" title="九.定时任务调度"></a>九.定时任务调度</h2><h3 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h3><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>crontab -e</code></td>
<td>编辑crontab定时任务</td>
</tr>
<tr>
<td><code>crontab -l</code></td>
<td>查询crontab任务</td>
</tr>
<tr>
<td><code>crontab -r</code></td>
<td>删除当前用户的crontab任务</td>
</tr>
</tbody></table>
<p>进入crontab编辑模式后，输入命令，格式为 * * * * * 命令</p>
<p><strong>参数解释：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>第一个*</td>
<td>一小时当中的第几分</td>
</tr>
<tr>
<td>第二个*</td>
<td>一天当中的第几小时</td>
</tr>
<tr>
<td>第三个*</td>
<td>一个月当中的第几天</td>
</tr>
<tr>
<td>第四个*</td>
<td>一年当中的第几月</td>
</tr>
<tr>
<td>第五个*</td>
<td>一周当中的星期几</td>
</tr>
</tbody></table>
<p><strong>特殊符号：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
</table>
<ul>
<li>| 表示任何时间<br>， | 连接不连续的时间</li>
</ul>
<ul>
<li>| 表示连续的时间范围</li>
</ul>
<p>*/n | 代表每隔多久运行一次</p>
<p><strong>命令举例：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>0 5,8,14 * * *</code></td>
<td>每天的5,8,14点0分执行一次</td>
</tr>
<tr>
<td><code>*/10 4 * * *</code></td>
<td>每天的凌晨四点，每十分钟运行一次</td>
</tr>
<tr>
<td><code>40 4 * * 1-5</code></td>
<td>每周一到周五凌晨四点四十执行一次</td>
</tr>
</tbody></table>
<h3 id="at-定时任务"><a href="#at-定时任务" class="headerlink" title="at 定时任务"></a>at 定时任务</h3><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>`ps -ef</td>
<td>grep atd`</td>
</tr>
<tr>
<td><code>at -选项 时间</code></td>
<td>输入后输入命令</td>
</tr>
<tr>
<td><code>Ctrl+d</code></td>
<td>第一次停止编辑，第二次退出at</td>
</tr>
<tr>
<td><code>atq</code></td>
<td>查看作业列表</td>
</tr>
<tr>
<td><code>atrm 序号</code></td>
<td>删除指定作业</td>
</tr>
</tbody></table>
<p><strong>时间格式：</strong></p>
<ul>
<li>hh:mm 小时:分钟</li>
<li>midnight（深夜） noon（中午）  teatime（下午四点左右）</li>
<li>4pm 下午四点   6am 上午六点</li>
<li><code>04:00 2020/9/19</code>  <code>04:00 2020.9.19</code> <code>04:00 2020-9-19</code></li>
<li>now + 时间 单位  <code>now + 2days</code> 现在起两天后</li>
<li>today 和 tomorrow</li>
</ul>
<h2 id="十-磁盘管理"><a href="#十-磁盘管理" class="headerlink" title="十.磁盘管理"></a>十.磁盘管理</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>lsblk -f</code></td>
<td>查看设备挂在情况</td>
</tr>
<tr>
<td><code>fdisk /dev/对应磁盘</code></td>
<td>为磁盘分区，n新增，d删除，p显示，w写入退出</td>
</tr>
<tr>
<td><code>mkfs -t ext4 /dev/对应分区</code></td>
<td>格式化分区</td>
</tr>
<tr>
<td><code>mount 设备名 目录名</code></td>
<td>将目录挂在到对应磁盘（临时，重启失效）</td>
</tr>
<tr>
<td><code>df -h</code></td>
<td>查询系统整体磁盘使用情况</td>
</tr>
<tr>
<td><code>du -h 目录名</code></td>
<td>查询指定目录磁盘占用情况，默认为当前目录</td>
</tr>
<tr>
<td><code>du -hac --max-depth=1 /opt</code></td>
<td>查询该目录所有内容磁盘情况，带单位，有汇总，深度为1</td>
</tr>
<tr>
<td><code>du -s 目录名</code></td>
<td>显示磁盘总用量</td>
</tr>
<tr>
<td>`ls -l</td>
<td>grep “^-“</td>
</tr>
<tr>
<td>`ls -l</td>
<td>grep “^d”</td>
</tr>
<tr>
<td>`ls -lR</td>
<td>grep “^-“</td>
</tr>
<tr>
<td><code>tree 目录名</code></td>
<td>树状展开目录（需先安装tree命令）</td>
</tr>
</tbody></table>
<h2 id="十一-网络配置"><a href="#十一-网络配置" class="headerlink" title="十一.网络配置"></a>十一.网络配置</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>ifconfig</code></td>
<td>查看网络配置</td>
</tr>
<tr>
<td><code>ping 目的主机</code></td>
<td>测试主机之间的连通性</td>
</tr>
<tr>
<td><code>service network restart</code></td>
<td>重启网络服务</td>
</tr>
<tr>
<td><code>hostname</code></td>
<td>查看主机名</td>
</tr>
<tr>
<td><code>修改/etc/hosts</code></td>
<td>设置映射</td>
</tr>
<tr>
<td><code>修改/etc/sysconfig/network-script/ifcfg-ens33</code></td>
<td>自定义ip地址，是否开机自启网络服务等</td>
</tr>
</tbody></table>
<h2 id="十二-进程管理"><a href="#十二-进程管理" class="headerlink" title="十二.进程管理"></a>十二.进程管理</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>ps</code></td>
<td>查看当前正在执行的进程状况</td>
</tr>
<tr>
<td><code>ps -aux</code></td>
<td>所有进程，用户的格式，后台进程运行的参数</td>
</tr>
<tr>
<td><code>ps -ef</code></td>
<td>以全格式显示当前所有进程</td>
</tr>
<tr>
<td><code>kill 进程号</code></td>
<td>通过进程号杀死进程</td>
</tr>
<tr>
<td><code>killall 进程名称</code></td>
<td>通过进程名称杀死进程包括子进程</td>
</tr>
<tr>
<td><code>killall -9 进程名</code></td>
<td>-9强制杀死进程</td>
</tr>
<tr>
<td><code>pstree</code></td>
<td>查看进程树</td>
</tr>
<tr>
<td><code>setup</code></td>
<td>查看全部的服务名</td>
</tr>
<tr>
<td><code>chkconfig --list</code></td>
<td>查看服务各个层级的自启动状态</td>
</tr>
<tr>
<td><code>chkconfig 服务名 --list</code></td>
<td>查看指定服务各个层级的自启动状态</td>
</tr>
<tr>
<td><code>chkconfig --level3 服务名 off</code></td>
<td>关闭该服务在3级别的自启动</td>
</tr>
<tr>
<td><code>chkconfig --level3 服务名 on</code></td>
<td>开启该服务在3级别的自启动</td>
</tr>
<tr>
<td><code>chkconfig</code></td>
<td>该指令能够管理的服务在/etc/init.d中</td>
</tr>
<tr>
<td><code>systemctl</code></td>
<td>该指令管理的服务在/usr/lib/systemd/system</td>
</tr>
<tr>
<td>`service 服务名 start</td>
<td>stop</td>
</tr>
<tr>
<td><code>systemctl get-default</code></td>
<td>查看默认开机运行级别</td>
</tr>
<tr>
<td><code>systemctl set-default multi-user.target</code></td>
<td>设置为开机进入运行级别3</td>
</tr>
<tr>
<td><code>systemctl set-default graphical.target</code></td>
<td>设置为开机进入运行级别5</td>
</tr>
<tr>
<td>``</td>
<td>u显示用户，p显示pid</td>
</tr>
<tr>
<td><code>systemctl list-unit-files</code></td>
<td>查看服务开机自启动状态</td>
</tr>
<tr>
<td><code>systemctl enable 服务名</code></td>
<td>设置该服务开机自启</td>
</tr>
<tr>
<td><code>systemctl disable 服务名</code></td>
<td>关闭该服务开机自启</td>
</tr>
<tr>
<td><code>systemctl is-enable 服务名</code></td>
<td>查看该服务是否开机自启</td>
</tr>
<tr>
<td><code>firewall-cmd --permanent --add-port=端口号/协议</code></td>
<td>打开端口</td>
</tr>
<tr>
<td><code>firewall-cmd --permanent --remove-port=端口号/协议</code></td>
<td>关闭端口</td>
</tr>
<tr>
<td><code>firewall-cmd reload</code></td>
<td>重新载入</td>
</tr>
<tr>
<td><code>firewall-cmd --query-port=端口号/协议</code></td>
<td>查看端口是否有效</td>
</tr>
<tr>
<td><code>firewall-cmd --query-port=端口号/协议</code></td>
<td>查看端口是否有效</td>
</tr>
<tr>
<td><code>firewall-cmd --query-port=端口号/协议</code></td>
<td>查看端口是否有效</td>
</tr>
<tr>
<td><code>firewall-cmd --query-port=端口号/协议</code></td>
<td>查看端口是否有效</td>
</tr>
<tr>
<td><code>firewall-cmd --query-port=端口号/协议</code></td>
<td>查看端口是否有效</td>
</tr>
<tr>
<td><code>firewall-cmd --query-port=端口号/协议</code></td>
<td>查看端口是否有效</td>
</tr>
</tbody></table>
<h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>top</code></td>
<td>展示正在运行的服务，定时刷新</td>
</tr>
<tr>
<td><code>top -d 秒数</code></td>
<td>设置刷新间隔（默认3秒）</td>
</tr>
<tr>
<td><code>top -i</code></td>
<td>不显示任何限制或僵死进程</td>
</tr>
<tr>
<td><code>top -p</code></td>
<td>指定id监视指定进程情况</td>
</tr>
</tbody></table>
<p><strong>top模式下交互操作</strong></p>
<table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>P</code></td>
<td>按cpu占用排序</td>
</tr>
<tr>
<td><code>M</code></td>
<td>以内存占用排序</td>
</tr>
<tr>
<td><code>N</code></td>
<td>以pid排序</td>
</tr>
<tr>
<td><code>q</code></td>
<td>退出top</td>
</tr>
<tr>
<td><code>u</code></td>
<td>按下后输入用户名，查看指定用户的进程</td>
</tr>
<tr>
<td><code>k</code></td>
<td>按下后输入pid，然后输入参数如9，杀死指定进程</td>
</tr>
</tbody></table>
<h3 id="监控网络状况"><a href="#监控网络状况" class="headerlink" title="监控网络状况"></a>监控网络状况</h3><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>netstat</code></td>
<td>查看系统网络状况</td>
</tr>
<tr>
<td><code>netstat -anp</code></td>
<td>an按一定顺序输出所有，p显示谁在调用</td>
</tr>
</tbody></table>
<h2 id="十三-rpm包管理和yum"><a href="#十三-rpm包管理和yum" class="headerlink" title="十三.rpm包管理和yum"></a>十三.rpm包管理和yum</h2><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>rpm -qa</code></td>
<td>查询已安装的所有rpm包</td>
</tr>
<tr>
<td><code>rpm -q 软件包名</code></td>
<td>查询该软件包是否安装</td>
</tr>
<tr>
<td><code>rpm -qi 软件包名</code></td>
<td>查询该软件包信息</td>
</tr>
<tr>
<td><code>rpm -qf 文件全路径名</code></td>
<td>查询文件所属的软件包</td>
</tr>
<tr>
<td><code>rpm -e rpm包名称（可部分）</code></td>
<td>卸载rpm包</td>
</tr>
<tr>
<td><code>rpm -e --nodeps rpm包名称</code></td>
<td>强制卸载rpm包无视依赖关系</td>
</tr>
<tr>
<td><code>rpm -ivh rpm包全路径名称</code></td>
<td>安装rpm包，i安装，v提示，h进度条</td>
</tr>
<tr>
<td><code>yum list</code></td>
<td>yum服务器上的软件列表</td>
</tr>
<tr>
<td><code>yum install 软件名称</code></td>
<td>安装该软件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell编程入门</title>
    <url>/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/Shell%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="一-Shell常识"><a href="#一-Shell常识" class="headerlink" title="一.Shell常识"></a>一.Shell常识</h3><p>本笔记采用==高亮==表示linux内指令，采用<code>code</code>表示脚本代码</p>
<ul>
<li>脚本以<code> #!/bin/bash</code> 开头</li>
<li>脚本通常以.sh结尾</li>
<li>脚本需要有可执行权限，也可以用==sh xxx.sh==执行不用权限</li>
<li>单行注释用<code>#</code>,多行注释用<code>:&lt;&lt;!  xxxx   !</code></li>
<li> 注意，开头的<code>#!/bin/bash</code>中的<code>#!</code>的意思是指定一个解释脚本的程序</li>
</ul>
<p>一个HelloWorld示例程序</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello world ~&quot;</span> <span class="comment">#直接写linux命令，按顺序执行</span></span><br><span class="line"><span class="comment">#这是单行注释</span></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">这是多行注释</span><br><span class="line">！</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="二-Shell变量"><a href="#二-Shell变量" class="headerlink" title="二.Shell变量"></a>二.Shell变量</h3><h4 id="1-变量的定义赋值"><a href="#1-变量的定义赋值" class="headerlink" title="1.变量的定义赋值"></a>1.变量的定义赋值</h4><ul>
<li>定义变量 ： 变量名=值</li>
<li>撤销变量 ： unset 变量名（对静态变量无效）</li>
<li>声明静态变量 ：readonly 变量 （无法unset）</li>
</ul>
<p>举例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=100  <span class="comment">#次处A为变量名,100是值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$A</span>  <span class="comment"># 输出要带上$符号</span></span><br><span class="line"><span class="built_in">unset</span> A  <span class="comment">#撤销变量A</span></span><br><span class="line"><span class="built_in">readonly</span> B=2 <span class="comment">#声明静态变量B</span></span><br></pre></td></tr></table></figure>
<p>可以把<strong>指令的结果赋值给变量</strong>，指令加上``反引号或者$()。<br>举例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">A=`<span class="built_in">date</span>`</span><br><span class="line">B=$(<span class="built_in">date</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;A=<span class="variable">$A</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;B=<span class="variable">$B</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-环境变量"><a href="#2-环境变量" class="headerlink" title="2.环境变量"></a>2.环境变量</h4><ul>
<li>常见<strong>系统环境变量</strong>： $HOME,$PWD,$SHELL,$USER</li>
<li>==set==显示系统所有的环境变量</li>
</ul>
<p><strong>设置环境变量</strong></p>
<ol>
<li>修改/etc/profile 文件（比如用vim打开）</li>
<li>在文件中加入 ==export 变量名=变量值==语句</li>
<li>==source 配置文件== （即/etc/profile）让配置立即生效</li>
<li>新加入的环境变量可以全局使用了</li>
</ol>
<h4 id="3-位置参数变量"><a href="#3-位置参数变量" class="headerlink" title="3.位置参数变量"></a>3.位置参数变量</h4><p>类似于编程中函数的参数</p>
<ul>
<li>运行是后面带上位置参数 ==./文件名.sh 10 20==，此处就带了10和20两个参数</li>
<li>在脚本代码中，用<code>$0</code> <code>$1</code> <code>$2</code> <code>$3</code>…来获取参数。</li>
<li>此处<code>$0</code>就是10 ，·<code>$1</code>就是20</li>
<li><code>$*</code> 代表所有参数，看做一个整体</li>
<li><code>$@</code> 代表所有参数，每个区分对待</li>
<li><code>$#</code> 代表所有参数的个数</li>
</ul>
<h4 id="4-预定义变量"><a href="#4-预定义变量" class="headerlink" title="4.预定义变量"></a>4.预定义变量</h4><ul>
<li><code>$$</code> 当前进程的进程号</li>
<li><code>$!</code> 后台运行的最后一个进程的进程号</li>
<li><code>$?</code> 最后一次命令运行返回的状态，0为成功执行</li>
</ul>
<p>tips： ==./脚本或程序 &amp;== 命令后面加个&amp;可以后台运行</p>
<h3 id="三-运算符"><a href="#三-运算符" class="headerlink" title="三.运算符"></a>三.运算符</h3><ol>
<li><code>$((运算式))</code></li>
<li><code>$[运算式]</code>  （推荐）</li>
<li><code>expr m - n</code> 中间有空格</li>
<li><code>expr \*, /, %</code> expression表达式的*要加反斜杠\</li>
</ol>
<h3 id="四-分支语句"><a href="#四-分支语句" class="headerlink" title="四.分支语句"></a>四.分支语句</h3><ol>
<li>字符比较，注意等号两边空格，中括号两边空格<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ &quot;OK&quot; = &quot;OK&quot; ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;equal &quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li>判断目录是否存在，用 <code>-f</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ -f /root/shcode/aaa.txt ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>多分支语句</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ $1 -gt 60 ]</span><br><span class="line">then </span><br><span class="line">    echo &quot;及格&quot;</span><br><span class="line">elif [ $1 -lt 60 ]</span><br><span class="line">    echo &quot;不及格&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>case语句</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">执行语句</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">执行语句</span><br><span class="line">;;</span><br><span class="line">&quot;值3&quot;)</span><br><span class="line">执行语句</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">*)</span><br><span class="line">以上都不满足执行本条语句</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>



<h5 id="常见条件判断运算符"><a href="#常见条件判断运算符" class="headerlink" title="常见条件判断运算符"></a>常见条件判断运算符</h5><table>
<thead>
<tr>
<th>语句</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>“” = “”</td>
<td>字符串比较</td>
</tr>
<tr>
<td>-lt</td>
<td>小于</td>
</tr>
<tr>
<td>-le</td>
<td>小于等于</td>
</tr>
<tr>
<td>-eq</td>
<td>等于</td>
</tr>
<tr>
<td>-gt</td>
<td>大于</td>
</tr>
<tr>
<td>-ge</td>
<td>大于等于</td>
</tr>
<tr>
<td>-ne</td>
<td>不等于</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT_6.S081_学习笔记</title>
    <url>/CS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/MIT-6-S081-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241636196.png" alt="image-20221224163508934"></p>
<p>MIT操作系统课程笔记</p>
<p>更新至第一节：课程介绍</p>
<span id="more"></span>

<h2 id="Lecture1：课程介绍"><a href="#Lecture1：课程介绍" class="headerlink" title="Lecture1：课程介绍"></a>Lecture1：课程介绍</h2><p>第一堂课是课程整体介绍</p>
<h3 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h3><p><strong>课程目标：</strong></p>
<ul>
<li>了解操作系统的设计与实现</li>
<li>研究课程提供的小型操作系统XV6</li>
<li>动手拓展操作系统</li>
</ul>
<p><strong>操作系统的作用：</strong></p>
<ul>
<li>为了更方便使用，并提高可移植性，对硬件进行抽象</li>
<li>在多个应用中实现硬件的多路复用</li>
<li>隔离应用程序，互不干扰</li>
<li>多个应用共享资源</li>
<li>保证共享的安全</li>
<li>保证应用的高性能</li>
<li>支持各种不同的应用</li>
</ul>
<p><strong>操作系统的运作过程：</strong></p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241653926.png" alt="image-20221224165343759"></p>
<p>操作系统会把电脑分为<strong>用户空间</strong>和<strong>内核空间</strong>，我们在用户空间打开一系列的应用，然后应用进程调用操作系统提供的接口就能进入内核空间，内核空间里提供各种服务，操作计算机的硬件资源，操作系统内核把应用的需求通过接口返回到用户空间。</p>
<p>从这里我们可以看出，操作系统就像一层壳把整个计算机的硬件资源罩住，然后壳上提供一些接口给应用程序使用。所以应用程序只能运行在操作系统至上，调用各种操作系统提供的系统调用。</p>
<p><strong>系统调用：</strong></p>
<p>操作系统提供的这些系统调用很像c语言的函数调用，但实际上两者并不一样，系统调用会进入操作系统内核执行操作。</p>
<p>系统调用举例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//很像函数调用，需要带入参数</span></span><br><span class="line">fd = open(<span class="string">&quot;out&quot;</span>, <span class="number">1</span>);	<span class="comment">//打开一个文件，out是文件名，1表示想写，返回值fd为文件描述符</span></span><br><span class="line">write(fd, <span class="string">&quot;hello\n&quot;</span>, <span class="number">6</span>);	<span class="comment">//向文件中写入，参数分别为文件描述符，字符串，字符数</span></span><br><span class="line">pid = fork();	<span class="comment">//创建一个子进程，返回进程号pid</span></span><br></pre></td></tr></table></figure>



<h3 id="UNIX系统调用简介"><a href="#UNIX系统调用简介" class="headerlink" title="UNIX系统调用简介"></a>UNIX系统调用简介</h3><p>因为所有的应用需要使用计算机的资源，都需要通过操作系统提供的接口，也就是系统调用，所以课程后半段介绍了下unix的系统调用。</p>
<p>课程研究的小型操作系统XV6和unix类似，选择unix是因为它代码开源，使用广泛，手册优良，设计干净。</p>
<p>课程用几个代码实例来展示了系统调用的作用，以及各种不同系统调用的协同工作，主要介绍了如下系统调用：</p>
<ul>
<li><code>int open(char *file, int flags)</code> 打开一个文件；flags表示read/write；返回一个fd（文件描述符）</li>
<li><code>int fork()</code> 复制当前进程的数据和命令，创建一个新进程即子进程，返回进程号pid。子进程的pid为0，以此区别父子进程。</li>
<li><code>int exec(char *file, char *argv[])</code> 加载一个文件并使用参数执行它; 只有在出错时才返回。这个新执行的程序进程会替换掉当前进程，丢弃指令和数据。</li>
<li><code>int exit(int status)  </code>  终止当前进程，并将状态报告给wait()函数。无返回</li>
<li><code>int wait(int *status) </code>  等待一个子进程退出; 将退出状态存入*status; 返回子进程PID。</li>
<li><code>int close(int fd)</code>  释放打开的文件fd文件描述符</li>
<li><code>int pipe(int p[])</code>  创建一个管道，把read/write文件描述符放在p[0]和p[1]中</li>
</ul>
<blockquote>
<p>文件描述符：open打开一个文件后，会给文件一个描述符，通常是一个数字。</p>
<p>一般0指向标准输入，1指向标准输出，2指向错误输出</p>
</blockquote>
<p>代码还展示了这些系统调用如何合作工作，比如用fork创建一个新进程，用close释放文件描述符1，再open打开文件，此时会给这个文件匹配一个最小的未占用的描述符，也就是刚释放的1，完成重定向。</p>
<p>这些代码具体可以看 ，<b><a href="https://github.com/duguosheng/6.S081-All-in-one/blob/main/tranlate_books/Introduction.md">课程介绍</a></b></p>
<p>下面展示书上XV6的完整系统调用表</p>
<table>
<thead>
<tr>
<th><strong>系统调用</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>int fork()</code></td>
<td>创建一个进程，返回子进程的PID</td>
</tr>
<tr>
<td><code>int exit(int status)</code></td>
<td>终止当前进程，并将状态报告给wait()函数。无返回</td>
</tr>
<tr>
<td><code>int wait(int *status)</code></td>
<td>等待一个子进程退出; 将退出状态存入*status; 返回子进程PID。</td>
</tr>
<tr>
<td><code>int kill(int pid)</code></td>
<td>终止对应PID的进程，返回0，或返回-1表示错误</td>
</tr>
<tr>
<td><code>int getpid()</code></td>
<td>返回当前进程的PID</td>
</tr>
<tr>
<td><code>int sleep(int n)</code></td>
<td>暂停n个时钟节拍</td>
</tr>
<tr>
<td><code>int exec(char *file, char *argv[])</code></td>
<td>加载一个文件并使用参数执行它; 只有在出错时才返回</td>
</tr>
<tr>
<td><code>char *sbrk(int n)</code></td>
<td>按n 字节增长进程的内存。返回新内存的开始</td>
</tr>
<tr>
<td><code>int open(char *file, int flags)</code></td>
<td>打开一个文件；flags表示read/write；返回一个fd（文件描述符）</td>
</tr>
<tr>
<td><code>int write(int fd, char *buf, int n)</code></td>
<td>从buf 写n 个字节到文件描述符fd; 返回n</td>
</tr>
<tr>
<td><code>int read(int fd, char *buf, int n)</code></td>
<td>将n 个字节读入buf；返回读取的字节数；如果文件结束，返回0</td>
</tr>
<tr>
<td><code>int close(int fd)</code></td>
<td>释放打开的文件fd</td>
</tr>
<tr>
<td><code>int dup(int fd)</code></td>
<td>返回一个新的文件描述符，指向与fd 相同的文件</td>
</tr>
<tr>
<td><code>int pipe(int p[])</code></td>
<td>创建一个管道，把read/write文件描述符放在p[0]和p[1]中</td>
</tr>
<tr>
<td><code>int chdir(char *dir)</code></td>
<td>改变当前的工作目录</td>
</tr>
<tr>
<td><code>int mkdir(char *dir)</code></td>
<td>创建一个新目录</td>
</tr>
<tr>
<td><code>int mknod(char *file, int, int)</code></td>
<td>创建一个设备文件</td>
</tr>
<tr>
<td><code>int fstat(int fd, struct stat *st)</code></td>
<td>将打开文件fd的信息放入*st</td>
</tr>
<tr>
<td><code>int stat(char *file, struct stat *st)</code></td>
<td>将指定名称的文件信息放入*st</td>
</tr>
<tr>
<td><code>int link(char *file1, char *file2)</code></td>
<td>为文件file1创建另一个名称(file2)</td>
</tr>
<tr>
<td><code>int unlink(char *file)</code></td>
<td>删除一个文件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CS基础知识</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>课程笔记</tag>
        <tag>MIT</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora使用教程</title>
    <url>/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/Typora%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212131702506.png" alt="image-20221213170258465"></p>
<p>利用软件Typora方便快捷的编辑markdown文档。</p>
<span id="more"></span>

<h1 id="一-为什么选择Typora"><a href="#一-为什么选择Typora" class="headerlink" title="一.为什么选择Typora"></a>一.为什么选择Typora</h1><p>​        之前一直用的有道云笔记，由于没有更新软件的习惯，所以一直用的远古版本。远古版本的有道云笔记写markdown还算简洁，但是后来发现里面有些语法GitHub并不支持，故更新到了最新版本。最新版不仅界面繁琐很多，而且使用起来不如以前丝滑，并不尽人意。最近也在用hexo搭建博客，需要一款趁手的markdown编辑器，就想起来Typora。</p>
<p>​        Typora也算是知名的markdown编辑器，早已久仰大名，就整来试了试，果真不让人失望。</p>
<ul>
<li><p>界面简洁清爽，使用流畅</p>
</li>
<li><p>实时预览，所写即所得</p>
</li>
<li><p>常用功能支持快捷键，十分方便</p>
</li>
<li><p>强大的表格插入功能，网站上复制下来的表格也可以自动转化为markdown格式</p>
</li>
<li><p>Typora+picgo+对象存储服务/图床 可以实现图片直接粘贴，后台自动上传并生成链接</p>
</li>
<li><p>多格式导出…</p>
<p>这篇文章记录下Typora常用的快捷键，顺带常用的没有快捷键的markdown语法。</p>
<p>markdown详细教程可以参考菜鸟的<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程</a></p>
</li>
</ul>
<h1 id="二-常用快捷键"><a href="#二-常用快捷键" class="headerlink" title="二.常用快捷键"></a>二.常用快捷键</h1><p>以下这些有快捷键的功能，就不展示源码了，详情可以看菜鸟教程。</p>
<h1 id="一级标题：ctrl-1"><a href="#一级标题：ctrl-1" class="headerlink" title="一级标题：ctrl+1"></a>一级标题：ctrl+1</h1><h2 id="二级标题：ctrl-2"><a href="#二级标题：ctrl-2" class="headerlink" title="二级标题：ctrl+2"></a>二级标题：ctrl+2</h2><h3 id="三级标题：ctrl-3"><a href="#三级标题：ctrl-3" class="headerlink" title="三级标题：ctrl+3"></a>三级标题：ctrl+3</h3><h4 id="四级标题：ctrl-4"><a href="#四级标题：ctrl-4" class="headerlink" title="四级标题：ctrl+4"></a>四级标题：ctrl+4</h4><h5 id="五级标题：ctrl-5"><a href="#五级标题：ctrl-5" class="headerlink" title="五级标题：ctrl+5"></a>五级标题：ctrl+5</h5><h6 id="六级标题：ctrl-6"><a href="#六级标题：ctrl-6" class="headerlink" title="六级标题：ctrl+6"></a>六级标题：ctrl+6</h6><p>段落：ctrl+0</p>
<h2 id="内容相关："><a href="#内容相关：" class="headerlink" title="内容相关："></a>内容相关：</h2><p><code>ctrl+b</code> 加粗，<strong>测试</strong></p>
<p><code>ctrl+i</code> 斜体，<em>测试</em></p>
<p><code>ctrl+u</code> 下划线（快捷键没法用），<u>测试</u></p>
<p><code>shift+alt+5</code>  删除线，<del>测试</del></p>
<p><code>shift+ctrl+飘号</code> 行内代码块，<code>测试</code></p>
<p><code>ctrl+k</code> 超链接，<a href="www.heithon.fun">测试</a>，支持本地跳转，也支持锚点(链接为 #标题)</p>
<p><code>ctrl+t</code> 创建一个表格，可以拖拽编辑</p>
<table>
<thead>
<tr>
<th align="left">测试</th>
<th align="left"></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">测试</td>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td></td>
</tr>
</tbody></table>
<p><code>shift+ctrl+q</code> 引用，插入二级引用还是用 <code>&gt;</code>，回车退出该级引用。</p>
<blockquote>
<p>测试111111111111111111111111</p>
<blockquote>
<p>测试2222222222222222222222</p>
</blockquote>
</blockquote>
<p><code>shift+ctrl+i</code> 图片，</p>
<p><img src="C:\Users\heisen\AppData\Roaming\Typora\typora-user-images\image-20221213161946098.png" alt="测试"></p>
<h1 id="三-其他常用语法"><a href="#三-其他常用语法" class="headerlink" title="三.其他常用语法"></a>三.其他常用语法</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><code>* </code> 或 <code>+</code> 或 <code>-</code> ：<strong>无序列表</strong>（后面需有个空格）</p>
<p>如果要清除，再符号后无内容情况下回车</p>
<ul>
<li>test1</li>
<li>test2</li>
<li>test3</li>
</ul>
<p><code>数字. </code>  <strong>有序列表</strong> </p>
<ol>
<li>test1</li>
<li>test2</li>
<li>test3</li>
</ol>
<p>列表嵌套，Tab键</p>
<ol>
<li>test 1<ul>
<li>test2</li>
<li>test2</li>
<li>test2</li>
</ul>
</li>
<li>test 1<ol>
<li>test3</li>
<li>test3</li>
</ol>
</li>
</ol>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>三个飘号然后回车，可以选择语言。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//测试</span><br></pre></td></tr></table></figure>



<p>选择语言中输入 flow，sequence，mermaid，可以绘制图表。</p>
<p>以flowchart绘制流程图为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="更多的样式"><a href="#更多的样式" class="headerlink" title="更多的样式"></a>更多的样式</h2><p><b style="color:darkred;background-color:yellow;">如果想要markdown语法里没用的样式，可以直接写html标签，比如这句话 </b></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span> <span class="attr">style</span>=<span class="string">&quot;color:darkred;background-color:yellow;&quot;</span>&gt;</span>如果想要markdown语法......比如这句话 <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="Typora-picgo实现截图直接粘贴"><a href="#Typora-picgo实现截图直接粘贴" class="headerlink" title="Typora+picgo实现截图直接粘贴"></a>Typora+picgo实现截图直接粘贴</h1><p>markdown文档中的图片，通常是靠链接进行访问，因为直接把图片源代码嵌入文档中会十分臃肿。</p>
<p>因此我们需要图床，就是把图片上传到一个服务器上，然后生成一个访问图片的链接，就可用markdown的image语法嵌入链接</p>
<p>但是如果需要大量截图，每次都得手动上传并生成链接，很是麻烦…..</p>
<p>那有没有可能直接截图，再Typora直接粘贴到对应位置就行，像word里的操作一样呢？</p>
<p>Typora提供了这一项功能，帮助我们自动化处理上传并生成链接这一步。</p>
<p>你可以结合<a href="https://github.com/Molunerfinn/PicGo">picgo(点击进入官方库)</a>这一强大的开源工具来实现这一目标。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212131653567.png" alt="image-20221213165310503"></p>
<p>这里推荐一个教程：<a href="https://www.bilibili.com/video/BV12t4y147Gs/?share_source=copy_web&vd_source=c0b7e2971676981be548dbddf193bcc9">2022年Typora+PicGo+阿里云OSS服务配置图床保姆级教程</a></p>
<p><b style="color:red;">注意：对象存储服务有被刷流量的风险，造成天价流量费，请仔细了解谨慎部署</b></p>
]]></content>
      <categories>
        <category>实用工具</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
        <tag>Typora</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo自定义友链页面</title>
    <url>/%E5%8D%9A%E5%AE%A2/hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212252232288.png" alt="image-20221225223214297"></p>
<p>如何自定义一个友链页面，甚至一个任意html？</p>
<span id="more"></span>

<h2 id="主题版本"><a href="#主题版本" class="headerlink" title="主题版本"></a>主题版本</h2><p><strong>hexo</strong>：5.4.2</p>
<p><strong>next主题</strong>：8.14.0</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="心路历程（着急直接看下面完整步骤）"><a href="#心路历程（着急直接看下面完整步骤）" class="headerlink" title="心路历程（着急直接看下面完整步骤）"></a>心路历程（着急直接看下面完整步骤）</h3><p>next主题的友链是放到侧边栏的，如果友链过多，或者想加入更多介绍信息，就会臃肿或者很难实现。正好又想整个导航页面，把友链和常用网址一起放进导航页面里，最好是像分类页、标签页那样，显示在post block里(就是中间显示文章那块，侧边栏不变)。</p>
<p>实际上问题就是，<strong>有没有一种方式能够用html自定义post block？而不是只能显示文章。</strong></p>
<p>hexo原本创建自定义页的方法是用 <code>new page 分页名称</code> 这个指令，然后会在sorce目录下新建一个页面名称命名的文件夹，里面有一个index.md文件，实际上就是像渲染文章一样用markdown文档渲染这个新页面。而markdown是支持渲染html代码的！我们就很自然的想到直接在markdown文件中写html代码，既方便又是非入侵的。</p>
<p>可是很快就遇到了问题，这个md文件里只能渲染简单的html代码，比如一些层级不多，带着内联样式的div盒子。但是一旦层级套的太多，各种样式的定义弄上去，就直接识别为一个代码块，不能成功渲染。</p>
<p>正在头疼之时，突然找到了解决方案：<strong>把index.md换成index.html</strong>，我为了方便查看效果，先用html文件写了再复制到md文件里，就顺手在旁边放了个html文件，惊讶的发现<strong>hexo渲染页面会优选选择index.html</strong>，并且会直接把index.html的内容渲染到post block上。可谓时来运转，柳暗花明，这恰恰戳中的我的需求。</p>
<h3 id="完整步骤"><a href="#完整步骤" class="headerlink" title="完整步骤"></a>完整步骤</h3><ol>
<li><p>使用<code>hexo new page 导航</code> 建立一个导航页，你博客根目录的source文件夹中会出现一个叫导航的文件夹</p>
</li>
<li><p>进入导航文件夹<code>cd /source/导航</code>，新建一个index.html  (根据测试会优先使用html文件，如感觉不保险可以把index.md删掉)</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212252213206.png" alt="image-20221225221348135"></p>
</li>
<li><p>在index.html中编辑自己的页面并保存，最后面我会给出我的代码参考。</p>
</li>
<li><p>重新部署网站试试看吧！</p>
</li>
</ol>
<p>你需要使用自己的前端知识来构建这个页面，也可以去扒其他好看的页面，也可以参考我的渣代码。</p>
<p style="background-color:rgba(255,0,0,.2); padding:0 15px; font-weight:bolder; border-left:5px #bbb solid">注意：经测试，html文件中的css样式会作用到整个页面（包括侧边栏），特别是a标签的样式。所以一定要活用选择器，多设置class,选择自己定义的标签，切勿影响到其他标签</p>

<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>网站实例：<a href="https://heithon.fun/%E5%AF%BC%E8%88%AA/">Heithon的导航页（点击查看）</a></p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212252228964.png" alt="image-20221225222807883"></p>
<p>效果如上，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 45px; font-weight: bolder; margin: 20px;&quot;</span>&gt;</span>导航页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navigation&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: flex;flex-direction: column;&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css">            </span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.frame</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">#BBB</span> solid <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">15px</span>;		<span class="comment">/*字体大小*/</span></span></span><br><span class="line"><span class="language-css">	            <span class="attribute">line-height</span>: <span class="number">20px</span>;      <span class="comment">/*行高*/</span></span></span><br><span class="line"><span class="language-css">	            </span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.type</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-weight</span>: bolder;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.boxwrapper</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*去除a标签下划线*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.navigation</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-right</span>: <span class="number">30px</span>;  </span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-bottom</span>: <span class="number">20px</span>; </span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-bottom</span>: none;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*去除未被访问的a标签的下划线*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.navigation</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*去除已经被访问过的a标签的下划线*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.navigation</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*去除鼠标悬停时的a标签的下划线*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.navigation</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>,<span class="number">1.1</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transition-duration</span>: .<span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*去除正在点击的a标签的下划线（鼠标按下，尚未松开）*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.navigation</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*去除获得焦点的a标签的下划线（被鼠标点击过）*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.navigation</span> <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>) solid;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* border-left: 2px black solid; */</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.box</span> <span class="selector-class">.img</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>:<span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-position</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-size</span>: <span class="number">110%</span> <span class="number">110%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">0px</span> <span class="number">10px</span> -<span class="number">2px</span> <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.box</span> <span class="selector-class">.words</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.words</span> <span class="selector-class">.name</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-bottom</span>: <span class="number">5px</span> ;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-weight</span>: bolder;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.words</span> <span class="selector-class">.infor</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.jump</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.jump</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-left</span>: <span class="number">4px</span> <span class="number">#BBB</span> solid;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.jumpbtn</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">min-width</span>: auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">line-height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">align-self</span>:center;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        /*点击跳转到指定位置*/</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jump&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#friendlink&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jumpbtn&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#blogs&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jumpbtn&quot;</span>&gt;</span>大佬博客<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#webs&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jumpbtn&quot;</span>&gt;</span>实用网站<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		/*一个frame就是一类，上面的跳转按钮通过id跳转到这些frame*/</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span> <span class="attr">id</span>=<span class="string">&quot;friendlink&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;type&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxwrapper&quot;</span>&gt;</span></span><br><span class="line">                /*下面每一个a标签都是一个链接卡片，新增链接直接新增整个a包裹的标签就行*/</span><br><span class="line">                /*img里的url填头像地址，name填网站名，infor填网站简介*/</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://mashiro.pub/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span>  <span class="attr">target</span>=<span class="string">&quot;_blank;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(/images/icons/shina.png);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;words&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>LoliMashiro<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;infor&quot;</span>&gt;</span>呐，你想变成什么颜色？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span> <span class="attr">id</span>=<span class="string">&quot;blogs&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;type&quot;</span>&gt;</span>大佬博客<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxwrapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.liaoxuefeng.com/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">target</span>=<span class="string">&quot; _blank;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(/images/icons/liaoxuefeng.png);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;words&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>廖雪峰的blog<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;infor&quot;</span>&gt;</span>java|python|前端|区块链|SQL<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span> <span class="attr">id</span>=<span class="string">&quot;webs&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;type&quot;</span>&gt;</span>实用网站<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;boxwrapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://csblog.cc/&quot;</span> <span class="attr">target</span>=<span class="string">&quot; _blank;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-image: url(/images/icons/csblog.png);&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;words&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>一站式秃头孵化基地<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;infor&quot;</span>&gt;</span>聚合了许多高质量技术博客<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>【置顶】欢迎来到本小站！</title>
    <url>/test/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%9C%AC%E5%B0%8F%E7%AB%99%EF%BC%81/</url>
    <content><![CDATA[<div style="background-color:black;color:white;padding: 5px 20px"><h3>本小站主要分享一些技术学习笔记和读书笔记</h3><h4>欢迎互换友情链接！具体请进入 <a href="/导航/">导航|友链</a> 栏查看</h4><p style="color:#fff;background-color:darkred;padding:0 20px;">如果遇到显示错误，请按Ctrl+F5刷新页面</p><p style="color:#fff;background-color:darkred;padding:0 20px;">如遇无法解决的bug请联系我，十分感谢！</p><h3>
    祝您阅读愉快！
    </h3><div>]]></content>
      <categories>
        <category>test</category>
      </categories>
  </entry>
  <entry>
    <title>html常用标签及属性</title>
    <url>/%E5%89%8D%E7%AB%AF/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%B1%9E%E6%80%A7%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[<p>…</p>
<span id="more"></span>

<h2 id="开头区域"><a href="#开头区域" class="headerlink" title="开头区域"></a>开头区域</h2><table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;!DOCTYPE ...&gt;</code></td>
<td>html5直接<code>&lt;!DOCTYPE html&gt; </code></td>
<td>告知浏览器文档使用哪种 HTML 或 XHTML 规范 <strong>“单标签”</strong></td>
</tr>
<tr>
<td><code>&lt;html lang=&quot;en&quot;&gt;</code></td>
<td>en：定义页面语言为英语。zh-CN：定义页面语言为中文。</td>
<td>用于指定页面的语言类型 <strong>“单标签”</strong></td>
</tr>
</tbody></table>
<h2 id="head区域"><a href="#head区域" class="headerlink" title="head区域"></a>head区域</h2><table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>meta</td>
<td>charset；name；http-equiv；content</td>
<td>基本的配置项目：字符集 charset，视口 viewport，定义“关键词”，定义“页面描述”等等 <strong>“单标签”</strong></td>
</tr>
<tr>
<td>title</td>
<td></td>
<td>设置网页标题 <strong>“双标签”</strong></td>
</tr>
<tr>
<td>base</td>
<td>href</td>
<td>指定基础的路径</td>
</tr>
<tr>
<td>style</td>
<td></td>
<td>写css</td>
</tr>
<tr>
<td>link</td>
<td>rel；type；href</td>
<td>定义文档与外部资源的关系</td>
</tr>
<tr>
<td>script</td>
<td></td>
<td>写js</td>
</tr>
</tbody></table>
<h2 id="body区域"><a href="#body区域" class="headerlink" title="body区域"></a>body区域</h2><h3 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h3><table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;h1&gt;-&lt;h6&gt;</code></td>
<td></td>
<td><strong>块级</strong></td>
</tr>
<tr>
<td><code>&lt;p&gt;</code></td>
<td>align</td>
<td><strong>块级</strong></td>
</tr>
<tr>
<td><code>&lt;hr /&gt;</code></td>
<td>align；size；width；color；noshade</td>
<td>水平线</td>
</tr>
<tr>
<td><code>&lt;br /&gt;</code></td>
<td></td>
<td>换行</td>
</tr>
<tr>
<td><code>&lt;div&gt;</code></td>
<td>align</td>
<td><strong>块级</strong></td>
</tr>
<tr>
<td><code>&lt;span&gt;</code></td>
<td></td>
<td><strong>内联</strong></td>
</tr>
<tr>
<td><code>&lt;center&gt;</code></td>
<td></td>
<td>内容居中（已废弃）</td>
</tr>
<tr>
<td><code>&lt;pre&gt;</code></td>
<td></td>
<td>预定义（几乎不用）</td>
</tr>
</tbody></table>
<h3 id="字体标签"><a href="#字体标签" class="headerlink" title="字体标签"></a>字体标签</h3><table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;u&gt;</code></td>
<td></td>
<td>下划线标记</td>
</tr>
<tr>
<td><code>&lt;s&gt;或&lt;del&gt;</code></td>
<td></td>
<td>中划线标记（删除线）</td>
</tr>
<tr>
<td><code>&lt;i&gt;或&lt;em&gt;</code></td>
<td></td>
<td>斜体标记</td>
</tr>
<tr>
<td><code>&lt;b&gt;或&lt;strong&gt;</code></td>
<td></td>
<td>粗体标签(已废弃)</td>
</tr>
<tr>
<td><code>&lt;font&gt;</code></td>
<td></td>
<td>字体标签（已废弃）</td>
</tr>
<tr>
<td><code>&lt;sup&gt;和&lt;sub&gt;</code></td>
<td></td>
<td>上标和下标</td>
</tr>
<tr>
<td><code>&lt;a&gt;</code></td>
<td>href；target；name；title</td>
<td><strong>内联</strong></td>
</tr>
</tbody></table>
<h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;img /&gt;</code></td>
<td>src；alt；width；height；title；align</td>
<td><strong>行内块</strong></td>
</tr>
</tbody></table>
<h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;ul&gt;</code></td>
<td>type</td>
<td>无序列表</td>
</tr>
<tr>
<td><code>&lt;ol&gt;</code></td>
<td>type</td>
<td>有序列表</td>
</tr>
<tr>
<td><code>&lt;li&gt;</code></td>
<td></td>
<td>列表项</td>
</tr>
<tr>
<td><code>&lt;dl&gt;</code></td>
<td></td>
<td>定义列表</td>
</tr>
<tr>
<td><code>&lt;dt&gt;</code></td>
<td></td>
<td>定义列表标题</td>
</tr>
<tr>
<td><code>&lt;dd&gt;</code></td>
<td></td>
<td>定义列表项</td>
</tr>
</tbody></table>
<h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;table&gt;</code></td>
<td>border；style=”border-collapse:collapse;”；width；height；bordercolor；align；cellpadding；cellspacing；bgcolor；background；bordercolorlight；bordercolordark；dir（ltr，rtl）</td>
<td>表格</td>
</tr>
<tr>
<td><code>&lt;tr&gt;</code></td>
<td>dir；bgcolor；height；align；valign</td>
<td>行</td>
</tr>
<tr>
<td><code>&lt;td&gt;</code></td>
<td>colspan；rowspan；align；valign；width；height；bgcolor；background</td>
<td>列（单元格）<strong>行内块</strong></td>
</tr>
<tr>
<td><code>&lt;th&gt;</code></td>
<td></td>
<td>加粗单元格即td+b</td>
</tr>
<tr>
<td><code>&lt;caption&gt;</code></td>
<td>align</td>
<td>表格标题，与tr并列</td>
</tr>
<tr>
<td><code>&lt;thead&gt;</code></td>
<td></td>
<td>按照thead、tbody、tfoot的顺序依次来显示内容</td>
</tr>
<tr>
<td><code>&lt;tbody&gt;</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>&lt;tfoot&gt;</code></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h3><p>framset和body只能2选1，iframe是body的子标记</p>
<table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;frameset&gt;</code></td>
<td>rows；cols</td>
<td>框架的集合</td>
</tr>
<tr>
<td><code>&lt;frame&gt;</code></td>
<td>scrolling；noresize；bordercolor；frameborder（0,1）；name</td>
<td>框架</td>
</tr>
<tr>
<td><code>&lt;iframe&gt;</code></td>
<td>src；width；height；scrolling；name</td>
<td>内嵌框架</td>
</tr>
</tbody></table>
<h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;form&gt;</code></td>
<td>name；id；action；method</td>
<td>表单标签</td>
</tr>
<tr>
<td><code>&lt;input&gt;</code></td>
<td>type；value；size；readonly；disabled</td>
<td>输入标签<strong>行内块</strong></td>
</tr>
<tr>
<td><code>&lt;select&gt;</code></td>
<td>multiple；size</td>
<td>下拉列表</td>
</tr>
<tr>
<td><code>&lt;option&gt;</code></td>
<td>selected</td>
<td>select里的每一项</td>
</tr>
<tr>
<td><code>&lt;textarea&gt;</code></td>
<td>rows；col；readonly</td>
<td>多行文本输入</td>
</tr>
<tr>
<td><code>&lt;label&gt;</code></td>
<td>for</td>
<td>关联input元素</td>
</tr>
</tbody></table>
<p>intput的type属性值</p>
<ol>
<li>text（默认）</li>
<li>password：密码类型</li>
<li>radio：单选按钮</li>
<li>checkbox：多选按钮</li>
<li>checked：将单选按钮或多选按钮默认处于选中状态。</li>
<li>hidden：隐藏框</li>
<li>button：普通按钮 </li>
<li>submit：提交按钮</li>
<li>reset：重置按钮</li>
<li>image：图片按钮,和提交按钮的功能完全一致</li>
<li>file：文件选择框</li>
</ol>
<h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><table>
<thead>
<tr>
<th>标签名称</th>
<th>常见属性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;bgsound&gt;</code></td>
<td>src；loop</td>
<td>播放背景音乐</td>
</tr>
<tr>
<td>``</td>
<td></td>
<td></td>
</tr>
<tr>
<td>``</td>
<td></td>
<td></td>
</tr>
<tr>
<td>``</td>
<td></td>
<td></td>
</tr>
<tr>
<td>``</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212051158145.png" alt="image"><br><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212051131565.png" alt="image"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>画板测试楼</title>
    <url>/test/%E7%94%BB%E6%9D%BF%E6%B5%8B%E8%AF%95%E6%A5%BC/</url>
    <content><![CDATA[<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212122038998.png" alt="image-20221212203852937"></p>
<p>在评论区测试画板功能哦</p>
<span id="more"></span>

]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>nand2tetris学习笔记</title>
    <url>/CS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/nand2tetris%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212201817519.png" alt="image-20221220181728418"></p>
<p>徒手搓电脑，并在上面跑俄罗斯方块</p>
<p>更新至第二章：布尔代数</p>
<span id="more"></span>

<h2 id="Week0-课程简介和一些背景知识"><a href="#Week0-课程简介和一些背景知识" class="headerlink" title="Week0:课程简介和一些背景知识"></a>Week0:课程简介和一些背景知识</h2><h3 id="一-nand2tetris课程介绍"><a href="#一-nand2tetris课程介绍" class="headerlink" title="一. nand2tetris课程介绍"></a>一. nand2tetris课程介绍</h3><p>​        nand2tetris即from nand to tetris(to和2的英文读音一致)，翻译过来就是从与非门到俄罗斯方块。这是一门由希伯来大学的两名教授开发的计算机基础知识课程。课程以项目驱动，从最基础的逻辑门开始，一步步构造一个完整的名为Hack的计算机系统，包括基础的硬件结构，还有软件层面的操作系统。我们甚至要构建一个名为jack的编程语言，用它来写操作系统，最后也是用它写一个俄罗斯方块小游戏在我们制造的这个计算机上运行。</p>
<p>​        通过这门课程，我们可以俯瞰整个计算机，拉通理解整个过程：从里面的每一个零件的协同运作，一直到能在屏幕上运行我们的应用程序。其中包含数字电路，计算机组成原理，操作系统，编译原理等等知识，但是都没有特别深入。这门课最大的价值是为我们展开了一幅计算机知识的地图，我们可以在学完整个课程后，选择自己喜欢的地方深入。另外课程提供的实验是这个课程的最大亮点，可以说这个实验就是课程本身，它提供了一种动手制造整个计算机的途经，让我们在实践中学习知识，尤为可贵。<b style="color:red">因此学习这门课程尽量要动手实践</b></p>
<p>​        本课程分为大的两部分，第一部分是硬件，第二部分是软件，自底向上的构建计算机系统。</p>
<h3 id="二-计算机的诞生"><a href="#二-计算机的诞生" class="headerlink" title="二. 计算机的诞生"></a>二. 计算机的诞生</h3><p style="padding:0px 10px;background-color: lightgreen;border-left:4px #555 solid">  tips: 本小节为本人凭借兴趣了解的题外话，可以跳过 </p>



<p>​        学习的过程中也在了解一些课余的知识，比如<strong>计算机是怎么诞生的？</strong> <strong>计算机为什么可以是计算机？</strong></p>
<p>​        计算机发明的最主要目的便如名字所说：计算。为了计算我们向前甚至可以追溯到结绳记数，但这些“古典”的计算方式都和我们现在的通用计算机相去甚远。关于现代计算机的开端，我们可以放眼到1936年由图灵提出的<strong>图灵机</strong>模型。图灵机是一个抽象的概念，它抽象了人们使用纸笔运算的过程，为自动化的计算提供了可能。</p>
<p>​        想想我们用纸笔是怎么运算的？首先，我们肯定有解题的思路，或者说叫算法，其次我们的问题有一些初始的值。我们的计算过程就是通过我们的解题思路，不停的对这些值进行修改，直到改成目标答案。而图灵设想了一个自动化的机器来完成上述操作，具体如下：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212201905375.jpeg" alt="什么是图灵机"></p>
<p>​        如上图，这是一个经典的图灵机模型图。其中包含这几个部分：</p>
<ul>
<li><p>一条无限长的纸带，纸带被划分成一个个小格子，每个格子只有三种状态 （空和1）</p>
</li>
<li><p>纸带上方的方盒子是一个读写头，可以在纸带上面按照格子移动，它可以做三种操作：</p>
<ol>
<li>读取格子数据</li>
<li>编辑格子里的数据</li>
<li>向左或向右移动</li>
</ol>
</li>
<li><p>横插在方盒子上的是图灵机当前的状态，图灵机可以有许多不同的状态。</p>
</li>
<li><p>方盒子上面的纸张是一些指令（也就是前文纸笔运算时的解题思路）。每条指令分为状态，和操作，控制读写头在指定状态执行指定操作。（状态可以由纸带上的数据和图灵机本身的状态共同决定）</p>
</li>
</ul>
<p>​        图灵机初始的时候，会有一个状态，纸带上也有一些初始值。然后读写头根据当前状态对应的指令，做出编辑数据，移动，改变状态等操作。到了下一个状态，又执行对应的操作。这样一个状态一个状态的迭代，不停的修改纸带上的数据，到最终得到结果时，就让图灵机进入停机状态。</p>
<p>​        上面的过程描述很抽象，这里推荐个视频可以帮助理解：<b style="color: blue;"><a href="https://www.bilibili.com/video/BV13v4y1w7yM/?share_source=copy_web&vd_source=c0b7e2971676981be548dbddf193bcc9">图灵机运作原理及示例</a></b></p>
<p>​        无论是否理解这个机器，至少我们知道，它能通过一些指令，用读写头在纸带上修修改改，而且过程是一步一步的，一条指令一串操作这样修改，最后得出结果。这为现代计算机的实现提供了方向，而且科学家们也证明了这个模型的可行性（具体可以学习计算理论和数理逻辑相关知识）。</p>
<p>​        我们要造一个计算机，首先得要有个东西装指令吧，还得有个东西能理解指令吧，还要能判断当前的状态；我们还要有个无限长的纸带，虽然不太现实，但至少得足够长吧；还要有个能在纸带上游走，对纸带数据进行增删改查的读写头吧；还有那个标记当前状态的玩意也得有吧。通过后面的学习，我们可以知道，现在目光所及的通用计算机几乎都是按照这个框架制造的。</p>
<p>下一章我们要学习<strong>布尔逻辑</strong>，这也是个划时代的玩意，它将概念上的形式逻辑落地成了硅片上的电路，用看得见摸得着的东西来呈现只有思维里和纸上符号才能表示的逻辑。计算时我们脑子里的解题思路，就有了一个被实体化的可能，图灵机的指令那块也有了实现的希望。事实上在布尔逻辑和电路的帮助下，我们能把各种信息数字化到芯片里，进行存储，读取和处理等等操作。正是这些伟大的思想和技术的综合作用，才带了如今非凡繁盛的互联网时代。</p>
<h3 id="三-学习环境和资料"><a href="#三-学习环境和资料" class="headerlink" title="三. 学习环境和资料"></a>三. 学习环境和资料</h3><p>学习这一套课程只需要有一台普通的电脑就行，win和linux系统都可。然后需要下载的资料链接放下面：</p>
<ol>
<li><p>课程视频教程b站：<b><a href="https://www.bilibili.com/video/BV1KJ411s7QJ/?share_source=copy_web&vd_source=c0b7e2971676981be548dbddf193bcc9">【高清-中字-公开课】依据基本原理构建现代计算机：从与非门到俄罗斯方块(点击观看)</a></b> </p>
</li>
<li><p>课程官网：<b><a href="https://www.nand2tetris.org/">Nand2Tetris（点击进入）</a></b></p>
</li>
<li><p>课程配套软件和练习文件：<b><a href="https://pan.baidu.com/s/1oX45mzHeQREl9IGp6YQe6g?pwd=2222">网盘下载（提取码：2222）</a></b></p>
</li>
<li><p>课程配套书籍《计算机系统要素：从零开始构建现代计算机》：<b><a href="https://pan.baidu.com/s/1yxG3ENOcnZrpe7BNoTsBfA?pwd=2222">网盘下载（提取码：2222）</a></b></p>
<p> 本人的环境是Windows系统，我自己学习的方式是以看书为主，然后有不懂的地方再去看视频，学完一章就直接动手实验。</p>
</li>
</ol>
<h2 id="Week1-布尔逻辑"><a href="#Week1-布尔逻辑" class="headerlink" title="Week1:布尔逻辑"></a>Week1:布尔逻辑</h2><h3 id="一-布尔代数"><a href="#一-布尔代数" class="headerlink" title="一. 布尔代数"></a>一. 布尔代数</h3><p>布尔逻辑是一套由<strong>乔治布尔</strong>于十九世纪中叶定义的逻辑系统。所谓逻辑，就是对正确推论的研究，如何根据一系列<strong>前提</strong>，推论出一个<strong>正确的结果</strong>。下面我们来看看布尔逻辑的内容。</p>
<p>首先我们知道一个命题，它不是真的，就是假的。假设有命题a为真，命题b也为真，那么有个命题c内容是a且b，它是真的还是假的？我们可以感性的举个例子，如果“这个棒棒糖是甜的”是真命题，“这个棒棒糖是球形”也是真命题，那么“这个棒棒糖是甜的并且它是球形”也显然是真命题。我们可以发现，前提a，b是真的，那么 a且b也是真的。我们把这种形式抽离出来，只要满足这个形式，不管内容是啥（不管ab是啥），它都成立。</p>
<p>这里的 “且” 是语言上表达的一种逻辑连接词，也可以叫 “与” 表示两者都满足；类似的还有 “或” ，a或b，其中至少一个为真就为真；还有 “非” ，这个字只作用于一个命题，而前两者连接两个命题，如果a是真的，那么非a就是假的，反之亦然。与，或，非组成了基础的三种逻辑连接词。所以可以抽象出来：</p>
<ul>
<li>a且b：必须a和b都是真的这个命题才真</li>
<li>a或b：a和b中至少一个是真的，这个命题就是真的</li>
<li>非a：如果a是真的，那么这个命题是假的，a是假的这个命题就是真的</li>
</ul>
<p>布尔把 “真” 设为1，把 “假” 设为0。然后用上述连接词，1或0为1, 0或0为0, 1或1为1，等一下，这不和加法一样了吗只是1+1比较特殊，还是得1。同样，对于 “与” 来说，就和乘法一样。而 “非”，无非是把1变为0,0变成1。<strong>这些真真假假是可以像数字一样进行计算的！</strong>只是这里的数字只有0和1（这很容易联想到二进制），而且没有进位，1+1还是1，我们称这种计算叫逻辑运算。由此，<strong>布尔代数</strong>诞生了。</p>
<blockquote>
<p>一些逻辑运算规则：</p>
<p>或：1+1=1；1+0=1；0+0=0；有1为1</p>
<p>且：1x1=1；1x0=0；0x0=0；有0则0</p>
<p>非：1’=0；0’=1；唱反调</p>
</blockquote>
<p>在布尔代数中，我们称这些连接词为布尔算子，就和普通代数中的加减乘除一样。<strong>与或非</strong>就是最基础的布尔算子。除了最基础的三个，我们还可以了解<strong>与非</strong>，就是先与再非；<strong>或非</strong>，先或再非；<strong>异或</strong>，连接两个命题，同真同假的话结果是假，只有真假不同结果才是真；<strong>同或</strong>，与异或相反，只有同真同假时结果才为真。普通的四则运算有一些交换律结合律之类的规律，还有些化简公式，布尔代数也不例外，如下图（不用刻意记住，需要时查找即可）。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211223212.png" alt="image-20221221122348025"></p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212202352608.png" alt="image-20221220235158994"></p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212202352620.png" alt="image-20221220235248586"></p>
<h4 id="布尔函数"><a href="#布尔函数" class="headerlink" title="布尔函数"></a>布尔函数</h4><p>在普通的代数中，我们不仅有1+1这种具体的式子，也有x+y+2这种带着未知量(变量)的式子，当x和y取不同的值时，就会得到不同的结果，这个式子只是表示一个计算的过程，我们可以称其为函数。布尔代数同样也有布尔函数，或者叫布尔表达式，只是其中的运算变成了逻辑运算，其中的变量只能取0或1。函数体现了一种<strong>黑箱思想</strong>，我们的表达式的变量需要接收一些值，然后经过表达式的处理，得到一个结果。比如布尔表达式 (x+y)z’，需要接收三个具体的值分别给xyz三个变量，我们把表达式本身想象成一个黑盒子，用符号f(x,y,z)表示，f是盒子的名字，盒子上有三个入口分别叫x,y,z，还有个出口出来运算结果。假设黑盒子内部可以自动化的处理。当我们把1,1,0这三个值扔进x,y,z这三个入口，那么盒子就可以产生出结果1，因为内部运算(1+1)x0’的结果为1，可以写为f(1,1,0)=1。xyz三个变量，每个变量只能取0或者1两个值，所以一共有2的3次方也就是8中取法，我们把所有的输入情况和对应结果找出来，并列成一张表，就成了<strong>真值表</strong>。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211235807.png" alt="image-20221221123555773"></p>
<h4 id="真值表反推函数表达式："><a href="#真值表反推函数表达式：" class="headerlink" title="真值表反推函数表达式："></a>真值表反推函数表达式：</h4><p>上面我们说了，函数就是一个黑盒子，给它输入，就一定会给一个固定的输出。反过来说，如果我们一开始不知道盒子里是啥呢？我们只知道有几个输入，还有对应输入应该是什么结果，换句话说就是只知道真值表！我们是否可以反推出盒子里的表达式呢？这也符合现实的很多情况，我们知道这个问题有哪些条件，我们也知道自己要什么结果，但是我们需要一个把条件变为结果的手段。这其实是可行的，我们先只关注输出为1的那些行，对于每一行，我们用与来连接xyz。然后我们关注这一行xyz分别的取值，比如第三行xyz分别取010，那么取0的那个字母就要进行非运算，第三行就写成x’yz’。然后把输出为1的三行都这么处理，就能得到三个与连接的式子：x’yz’，xy’z’和xyz’，接着把这三个式子用或连接，就成了x’yz’+xy’z’+xyz’，这其实就是这个真值表的函数表达式了，最后用上面的计算规律化简就成了我们熟悉的(x+y)z’。我们可以得到化简过程中你可能会发现中途有好多种表达式，所以一个真值表可能对应不止一个黑盒子，我们通常选取最简单的那一个。另外你还可以发现，<strong>不管多复杂的真值表，只用与或非三种算子就能表示</strong>。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212231111931.png" alt="image-20221223111143868"></p>
<h4 id="与非的妙用："><a href="#与非的妙用：" class="headerlink" title="与非的妙用："></a><strong>与非的妙用</strong>：</h4><p>与非(nand)，(xy)’，是一个十分牛的算法，因为只用与非代替基础的三种算子：与或非。这用上面运算规律中的<strong>德摩根律</strong>很容易能求出。进而我们可以把任何表达式，都转化为只用与非这一种算子的表达式。这在之后构建硬件中起了非常大的作用，你也可以发现课程题目中的nand说的就是与非门，这是这门课程项目的最基础的元素。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211313126.png" alt="image-20221221131327050"></p>
<h4 id="与现实世界连接："><a href="#与现实世界连接：" class="headerlink" title="与现实世界连接："></a><strong>与现实世界连接</strong>：</h4><p>有了上面知识，我们就可以自己设计一个函数了，给这个函数喂一些0和1，就能吐出想要的0和1。但是这有什么用呢？上一章第二节我们谈到了图灵，他有个好朋友叫<strong>香农</strong>，香农在1938年的硕士论文《继电器与<em>开关电路</em>的符号分析》中将这些概念上的逻辑与物理世界连接，让这些理论的落地有了可能。香农是研究通讯的，他发现电从一点到另一点本身不是信息，而电的有无却可以是信息。比如我们了解的电报，通过电路开关以及开关的时间，就可以表示语言信息。而电路的开关引起了香农的注意，这电路一开一关两种状态，不是正好对应了布尔逻辑中的1和0两种状态吗？我们将信息转化为0和1，然后用电路的开关去表示，我们还能用真值表设计“黑盒子”去处理这些信息，也就是说，我们能把逻辑放到看得见摸得着的电路板上了。</p>
<p>我们再回想一下上一章的图灵机，其中一个要考虑的点就是如何把我们的计算思路给存到机器里去，如何让机器去理解。现在看来，这一切都有了实现的可能。下一节<strong>逻辑门</strong>，我们将把理论落实，把抽象的与或非转化为具有物理实体的与门，非门，或门，还能会制造后面需要用到的一些门电路或者说芯片。你还会发现我们的门电路或者说芯片，就是给一堆输入的0和1，然后输出特定的0和1，设计门电路就是在设计布尔函数。</p>
<p style="color:#888;background-color:lightyellow;padding:0px 10px;
border-left:4px #999 solid;">拓展：香农也是一位很有趣的科学家，这里有一部纪录片可以了解下：<a href="https://www.bilibili.com/bangumi/play/ss34520/?from=search&seid=4357879265608450011&spm_id_from=333.337.0.0">《香农传》</a></p>



<h3 id="二-门电路"><a href="#二-门电路" class="headerlink" title="二. 门电路"></a>二. 门电路</h3><h4 id="从编码说起："><a href="#从编码说起：" class="headerlink" title="从编码说起："></a>从编码说起：</h4><p>我们知道电脑里面就是一堆电路，稍微了解计算机的可能听说过，电脑只会二进制语言，只能读懂0和1。但是我们玩电脑，可以看图片，听音乐，可以看视频，甚至在大型游戏中模拟了另外一个现实，你可以在一个空间中畅游互动。显然计算机表现出来的不只是0和1，这都离不开编码的帮助。</p>
<p>像上一节说的电报，我们可以通过一些规则，把不是0和1的信息变成0和1。比如我们规定字母a是000，b是010，c是100，这样字母信息就变成了0和1的信息可以传入电脑中。向电脑输入字母应该是按键盘，安一个按钮可以输出一些0和1的信号，我们把这些信号变成abc字母规定的编号。比如按了a键，键盘输出101101，然后我们把它转化为000，这个过程就是<strong>编码</strong>。电脑怎么展示这些字母呢，首先它得有个屏幕，屏幕也是由0和1控制的，通过屏幕上有的地方通电发光，有的地方不通电变暗就能显示图案。很显然屏幕上面这么多发光点，控制屏幕的0和1是和字母不同的。也就是说我们需要一个翻译，来把字母的编码转化为屏幕可以显示的0和1，然后控制屏幕怎么发光，这个过程就是<strong>译码</strong>。</p>
<p>上述过程我们可以猜想有两个东西，一个编码的东西，一个译码的东西，它们输入一些0和1，吐出一些0和1，这不就是上一节的布尔函数吗？通过编码译码，我们就可以把现实的信息数字化。当然上述例子极其粗糙，整个计算机系统是一个超级工程，肯定不会如此简单，后续我们也会学习更细节的东西。</p>
<h4 id="在电路中实现逻辑"><a href="#在电路中实现逻辑" class="headerlink" title="在电路中实现逻辑"></a>在电路中实现逻辑</h4><p style="background-color: lightgreen;padding:0px 10px;
border-left:4px #555 solid;">  tips: 这一小点为拓展，稍微了解即可 </p>

<p>所谓的逻辑门就是逻辑电路中最基本的组件，可以实现与或非这些操作的电路。</p>
<p>课程并没有要求我们去了解最基础的与非门电路是怎么实现的，我们前面说了，有了与非门，就可以实现所有的布尔函数。课程默认与非门是造好了的，我们拿来用便可，但我还是稍微了解了一下具体的实现。</p>
<p>一切要从发明大王爱迪生说起，爱迪生在捣鼓灯泡的过程中发现了爱迪生效应，而弗莱明通过爱迪生效应制造了二极管，一种可以单向通电的元器件。后来福雷斯特在二极管的基础上制造了三极管，三极管在二极管的基础上增加了第三个端，在第三端施加少量电压便可以使另外两端导通。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211703536.png" alt="image-20221221170306412"></p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211703168.png" alt="image-20221221170322087"></p>
<p>我们可以用符号来表示三极管，并用三极管来构建基本的逻辑门。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211711668.png" alt="image-20221221171127619"></p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211711063.png" alt="img"></p>
<p>我们可以看到，这时候的三极管还是类似灯泡一样，烧的灯丝，我们称其为<strong>电子管</strong>。电子管体积巨大，功效奇高，而且寿命不长，所以用电子管构建的第一台计算机，也是体积庞大的功耗怪兽。后来利用半导体材料制造的<strong>晶体管</strong>横空出世，晶体管利用硅的特性来制造，体积小巧，功耗低，很快全面代替了电子管。后来人们发现，制造晶体管电路的材料可以被硅包办，为什么不直接把电路刻在一块硅片上呢？于是集成电路出现了，所有的元器件都是直接刻在硅片上，并且体积越来越小以至于到了纳米级别，数量越来越多到达千亿级别，让计算机真正成为了能握在掌心的超级工程。</p>
<p>晶体管的工艺也一直在更新，为了更加稳定更加高效。现在比较流行的是<strong>cmos</strong>制程，用mos管来代替三极管，实现更稳定的性能。</p>
<p>无论如何，我们的课程假设我们已经有了许多的<strong>与非门</strong>(nand)，你可以把它想象成一个小黑盒，盒子上有三根暴露的电线abc，电线只有两种状态，可以是有电和没电，也可以是高电压和低电压。c电线的状态总是(ab)’。我们将只用这些与非门来构造整个计算机。</p>
<h4 id="用与非门构建基础的门电路"><a href="#用与非门构建基础的门电路" class="headerlink" title="用与非门构建基础的门电路"></a>用与非门构建基础的门电路</h4><p>还记得学布尔函数时的黑盒思想吧，我们先来把这些基本的门变成带接口的盒子画出来：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211742060.png" alt="image-20221221173348672"></p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212222219330.png" alt="image-20221222221828856"></p>
<p>这些其实就是逻辑门的电路符号。我们要实现一个门电路，其实就是求它的布尔表达式，有了这个表达式我们就可以根据表达式连接电路。下面以非门为例展示如何构建：</p>
<ul>
<li><p>首先我们确定或门的输入和输出，它有一个输入a,有一个输出out。</p>
</li>
<li><p>我们知道c=a+b,但是我们要化为全是与非门的形式，所以out=(aa)’，也就是a和a本身与非一下</p>
</li>
<li><p>接下来就是按照式子画图：</p>
<ul>
<li><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211748512.png" alt="image-20221221174829356"></li>
</ul>
</li>
</ul>
<p>有了非门，我们就可以把非门用在后面的逻辑门制造中，而不用考虑非门如何制造，同理我们可以画出其他几个基础逻辑门的电路图。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211751914.png" alt="image-20221221175156811"></p>
<p>除了与或非异或，我们还需要两个特殊的逻辑门——<strong>multiplexor</strong>和<strong>demultiplexor</strong>，简称<strong>mux</strong>和<strong>dmux</strong>。</p>
<p>mux的有三个接收端和一个输出端，三个接收端分别为a,b,sel，输出端为out，sel可以选择让out输出的是a的值还是b的值。比如a为0，b为1，当sel为0时，out就输出a的值0，当sel为1时就输出b的值为1。</p>
<p>dmux可以看做是mux的逆过程，dmux有两个接收端，in和sel，两个输出端a，b。sel可以选择让in从a出来还是b出来，另一端一直为0。比如说in输入一个1，sel=0时，a就输出1b就输出0，sel=1时，a就输出0b就输出1。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211803368.png" alt="image-20221221180334312"></p>
<p>以上两个电路比较复杂，不能像基本门电路一样直接写出表达式，所以我们采用真值表法来求出表达式</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212211804000.png" alt="image-20221221180450827"></p>
<p style="padding:0px 10px;background-color: lightgreen;border-left:4px #555 solid">  tips: 一定要自己动手推导下，从表达式的推算到电路图的绘制，这将极大的帮助理解 </p>

<h4 id="多位基本门和多通道逻辑门"><a href="#多位基本门和多通道逻辑门" class="headerlink" title="多位基本门和多通道逻辑门"></a>多位基本门和多通道逻辑门</h4><p>在很多时候，我们需要同时把许多信号做相同的操作，或者说把一组信号当作一个整个信号进行处理。这时我们就需要<strong>多位逻辑门</strong>了，根据后面课程的需要，我们将要制作16位的与或非门和mux，分别叫做and16，or16，not16，mux16。以前输入的一个信号a变成了一组信号，我们可以用数组来表示：a[16]。举个例子：a[16]是1111111111111111一共十六个1，我们的not16可以直接把这组信号变为0000000000000000十六个0。要制作这样的多位门其实很简单，<strong>直接把16个一位的基础逻辑门拼起来装进一个大黑盒子</strong>就行了。</p>
<p>而<strong>多通道逻辑门</strong>主要说的是mux和dmux，通过前面学习可以知道，mux和dmux都可以用sel这个输入来控制a和b两个端。那么sel能否控制更多呢，比如控制4个或者8个端？要创造这样的门是有一定技巧的，我们先从4个端的mux看起，要用sel端来控制4个16位的信号，a[16]，b[16]，c[16]，d[16]。首先想到的是以前sel只有一位，不是0就是1，这样只能控制两个信号。现在有了4个信号，我们可以把4个信号俩俩分组，sel为0就选择a[16]和b[16]，sel为1就选择c[16]和d[16]。可是sel只有一位啊，只能选择其中的两个，我们顺其自然就能想到再给sel来一位，就能从前一位选中的两个中选择一个，就实现了4选1啦。一个mux16可以从2个中选一个，所以要从4个中选2个就需要2个mux16，他们的sel接同一个信号构成1位。从选中的两个中再选一个，又需要一个mux，它的sel又是1位。所以要制造一个mux4way16，需要3个mux16。sel就升级为了两位的sel[2]，00，01，10，11正好分别对应四个通道。</p>
<p>从上述推到中我们可以拓展，要从n个信号选择一个信号，我们需要<strong>k=log2 n</strong>个信号来控制，也就是说k个信号可以去选择<strong>n = 2^k</strong> 个信号。比如16是2的4次方，所以我们只用4个信号就能控制16个信号，因为4个0或1可以有16种组合。我们还能从二进制角度看待这一点，四位二进制数的最大值1111就是十进制的16。知道这一点很重要，它在后续的编码译码中起了相当大的作用。</p>
<p>上面这段描述比较抽象，不理解可以结合下面的图来看，mux8way16可以同理由mux4way16来构建。而dmux4way和dmux8way需要一点逆向思维，可以自行思考下：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212222311587.png" alt="image-20221222231151426"></p>
<p>还是老话，尽量自己动手画一画，印象深刻。</p>
<p>下一节我们将要学习用一种类似编程语言的东西来描述这些零件。我们将用代码描述这些零件，这样我们就可以在电脑上对这些零件进行模拟测试了（毕竟要用真家伙做这些电路也挺费事）。</p>
<h3 id="三-硬件描述语言HDL"><a href="#三-硬件描述语言HDL" class="headerlink" title="三. 硬件描述语言HDL"></a>三. 硬件描述语言HDL</h3><p>由于用实物做实验条件太难，而且不可控的因素很多，所以本课程采用软件模拟的方式进行，也就是说我们造的这台电脑是在我们自己的真电脑上运行的。所有的逻辑门都通过硬件描述语言HDL来创建。</p>
<h4 id="什么是HDL"><a href="#什么是HDL" class="headerlink" title="什么是HDL"></a>什么是HDL</h4><p>通过上面的学习我们知道，一个逻辑门可以看成一个黑盒，黑盒外面有输入和输出接口，黑盒的里面有各种逻辑门电路。HDL就是一种计算机语言，它可以用来描述这样一个逻辑门或者芯片。本课程使用的HDL是老师为课程设计的简化版本，和设计生产使用的HDL语言差距还是不小，但是也突出了其精髓。下面是用HDL语言描述的一个与门：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//双斜线可以写注释</span><br><span class="line">    </span><br><span class="line">CHIP and&#123;	//CHIP 芯片名字&#123;&#125; 大括号内用于描述内容</span><br><span class="line">    //大括号内分两部分，第一部分规定黑盒子外的输入输出端口</span><br><span class="line">	IN a,b;		//IN部分规定了输入端口</span><br><span class="line">	OUT out;	//OUT部分规定了输出端口</span><br><span class="line">	</span><br><span class="line">	//第二部分规定了黑盒子里面的线路怎么连接的</span><br><span class="line">	PARTS:</span><br><span class="line">	Nand(a=a,b=b,out=nandab);	//我们以电路里的每个逻辑门为线索，规定每个逻辑门的输入和输出</span><br><span class="line">	Not(in=nandab,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将这样一串代码写进一个文件中，文件的名字必须和芯片的名字一样，然后后缀为.hdl，比如上面这个芯片的名字就叫and.hdl。接着就可以放进专门的软件里调试了。</p>
<p>第0章我们分享了课程需要的所有软件资源，打开课程配套软件 <code>nand2tetris\tools\HardwareSimulator.bat</code>(Linux打开.sh文件)，将上面的and.hdl导入进软件中，就可以对这个与门进行调试。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212231138837.png" alt="image-20221223113817779"></p>
<p>可以在设置输入那里输入想要的值，然后点一下计算输出的按钮，就能在展示输出里看到对应的输出。</p>
<p>我们可以手动输入每一种情况，看看输出正确与否，就能验证我们的设计是否正确。但是有的芯片输入的组合极多，手动输入效率实在太慢了，因此这个软件还可以导入另外两种后缀的文件 .tst脚本文件和 .cmp比较文件。.tst文件可以通过导入脚本按钮导入，课程资料里提供了每个芯片需要的测试脚本，经过测试脚本测试后的芯片，会输出一个.out文件，这个文件其实就是这个芯片的真值表。.cmp文件是课程提供的正确芯片应该输出的真值表，我们可以比较自己输出的.out 文件和.cmp文件是否一致。后面再来详细说说导入脚本的一些问题。</p>
<h4 id="HDL基本语法"><a href="#HDL基本语法" class="headerlink" title="HDL基本语法"></a>HDL基本语法</h4><p>通过上面的例子我们可以了解到，一个.hdl文件就是一个芯片，而代码内容必须包含在如下的大括号里，这个结构规定了<strong>芯片的名字</strong>，而且<strong>必须和文件名字</strong>一致。内部分为两部分，一部分定义输入和输出，即黑盒外的接口；一部分定义内部的零件和电路，写在PARTS：后面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP 芯片名字&#123;</span><br><span class="line">	//定义输入输出</span><br><span class="line">	IN</span><br><span class="line">	OUT</span><br><span class="line">	//定义内部线路</span><br><span class="line">	PARTS:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义输入输出采用如下格式，IN 后面跟输入接口的名字，OUT后面跟输出端口的名字，这个名字可以自定义，一般多个输入或者多个输出，我们定义为a,b,c…，如果只有一个输入那么就叫in，只有一个输出就叫out。像mux和dmux这种有个选择的输入，我们就叫它sel。一次定义多个接口，名字中间用逗号隔开，每一行分号结尾</p>
<p>如果有很多位的话，可以用数组的表示法，比如a[16]，sel[2]，表示16位和2位的信号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP 芯片名字&#123;</span><br><span class="line">	//定义输入输出</span><br><span class="line">	IN a[16],b,in,sel;</span><br><span class="line">	OUT a,b[16],out;</span><br><span class="line">	//定义内部线路</span><br><span class="line">	PARTS:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义内部线路是重头戏，通过前两节的学习，我们知道内部线路也是许多逻辑门组成的。信号的流动过程大概是  输入口-&gt;逻辑门输入-&gt;逻辑门输出-&gt;逻辑门输入-&gt;逻辑门输出-&gt;……-&gt;逻辑门输出-&gt;输出口。因此我们只用关注内部的逻辑门是怎么相互连接的。下面用mux举例，先再回顾下mux的电路图：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212231200216.png" alt="image-20221223120007160"></p>
<p>黑盒子里有四个逻辑门，一个非门，两个与门，一个或门。对于非门，它的输入是sel，输出是给与门，我们就可以这样描述它<code>not(in=sel,out=outa)</code>;，not是非门的名字，也就是非门这个.hdl文件的名字，in=sel表示输入的是sel。out=outa，我们要把非门的输出连接到与门，可以这样操作，先给输出的那条电线取个名字叫outa，待会把那个与门的输入接到电线outa上就行了，我们称这样的中介一样的线叫做<strong>管线</strong>，多位的就叫<strong>总线</strong>。</p>
<p>四个零件都这样描述一下，就是下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP mux&#123;</span><br><span class="line">	IN a,b,sel;</span><br><span class="line">	OUT out;</span><br><span class="line">	</span><br><span class="line">	PARTS:</span><br><span class="line">	Not(in=sel, out=notsel);</span><br><span class="line">	and(a=a,b=notsel,out=outa);</span><br><span class="line">	and(a=b,b=sel,out=outb);</span><br><span class="line">	or(a=outa,b=outb,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>值得注意的是：软件中只有与非门(nand)是可以直接使用的，需要先自己用nand门构建与或非门，上述文件mux.hdl在运行时会去寻找同一目录下的Not.hdl，and.hdl，or.hdl，而这些都是自己构建的，输入输出口都得和自己定义的吻合。(实际上软件内置所有基本门，门的名字和接口和书上一致)</p>
<p>还有一个问题是<strong>多位数据的传输</strong>，比如a[16]这个信号，你可以想象一根电线里有16根小电线，给它们编个号，注意得从0开始，就是0,1,2,3,4…14,15。当需要把前8个信号接到outa这个总线上时，我们可以这么写 a[0..7]=outa，outa不用去规定有几位，它由输入的信号自动决定，后面保持不变。如果需要把多位信号中的一位输出到管线b上，可以这样写 a[2]=b，就是把a的2号电线(第三个信号)输出到b上。这里的a[2]是在PARTS里的，表示信号的编号，而a[2]在IN或OUT后面，则表示a有两位信号，和其他编程语言里数组的定义和取值差不多。</p>
<p>软件的脚本使用，个人认为还是视频更加直观，这里贴下链接：<b><a href="https://www.bilibili.com/video/BV1KJ411s7QJ?p=10&vd_source=2185c480eb8959660534c8145bce45ff" style="color:darkblue;">硬件调试软件的使用</a></b></p>
<p>下面补充一些脚本的注意事项，以mux的测试脚本为例，你可以通过修改脚本来做一些自定义的操作：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212231216551.png" alt="image-20221223121615508"></p>
<h4 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h4><p>现在我们的目标是把上一节计算并画图出来的门电路全部转化为hdl文件，并且都要通过软件的测试。书上为我们规定了文件名称，和输入输出接口的名称，需要动手的是PARTS：后面的部分，打开文件夹<code>nand2tetris\projects\01</code>，找到里面的.hdl文件用顺手的文本编辑器打开，然后为里面的PARTS部分填空吧！</p>
<blockquote>
<p>我开始不知道老师给了模板，就自己新建文本文档写了，所有的文件名都整成了小写字母，还需要改脚本里的名字，直接用老师的模板方便很多。下面的参考代码只用关心PARTS部分就好。</p>
</blockquote>
<p>下面是我的代码链接，已经全部通过测试脚本，你可以先自己动手做完，实在搞不懂再看答案。</p>
<p>链接：<a href="https://github.com/Heithon/nand2tetris-labs-and-notes/tree/main/01">第一章实验结果</a></p>
<h3 id="四-结语"><a href="#四-结语" class="headerlink" title="四.结语"></a>四.结语</h3><p>本章节用与非门来构建了所有我们需要的基础逻辑门，实际上也可以只用或非门来构建，更可以综合使用各种与或非门来构建，可以自行去学习<strong>数字电路</strong>相关的课程。为了让教学更加友好，让我们忽略哪些繁琐的细节抓住主要知识，这个课程的设计并没有考虑效率问题，现实中的芯片设计中这些问题是非常重要的。一个电路中交叉线路的数量，基本门的数量，有许许多多的工程师和科学家去优化它们，以求更快的速度，更低的功耗和更低的成本，这些不是这门课的主要目的，我们可以在学完这门课程，再去自行探索。</p>
<h2 id="Week2-布尔运算"><a href="#Week2-布尔运算" class="headerlink" title="Week2: 布尔运算"></a>Week2: 布尔运算</h2><p>我们之前讲过，计算机实际上就是模仿我们人用纸笔计算的过程。人在用纸笔计算时，有个很重要的步骤就是“计算”，我们计算可以背乘法口诀表，可以列竖式计算，也可以使用其他工具，但是计算机应该怎么办呢？计算机里的信息都是0和1这样的电信号，我们很容易想到前面的<strong>逻辑运算</strong>，与或非这些运算都是只操作0和1的。不过只有逻辑运算还是不够，实际问题中有许多算数运算，比如要算个150+50等于200，这用逻辑运算是走不通的，所以我们还要学习只有0和1的算数运算，即<strong>二进制</strong>。本章着重制造计算机的运算单元，它可以进行逻辑运算和算数运算。</p>
<h3 id="一-二进制和补码"><a href="#一-二进制和补码" class="headerlink" title="一. 二进制和补码"></a>一. 二进制和补码</h3><h4 id="二进制和十进制的转化"><a href="#二进制和十进制的转化" class="headerlink" title="二进制和十进制的转化"></a>二进制和十进制的转化</h4><p>十进制我们很熟悉，就是满十进一，组成十进制体系的数字是从0到9。二进制顾名思义就是满2进1，因此二进制体系下数字只有0和1两个，就很符合我们之前学习的知识。用二进制计算1+1，因为满2进1，所以结果为10，它等价于十进制的贰而非十进制的十。</p>
<p>二进制和十进制如何相互转化呢？从上面的例子可以看到10第二位的1是因为第一位满了2进上来的(最右边为第一位)，所以第二位的1表示的是2的1次方，同理第一位的1表示2的0次方即1，第三位的1表示2的2次方，第n位的1表示2的n-1次方。所以用每一位的数字乘以这个n-1次方，再加起来，就是这个n位二进制数的十进制数，以10011举例：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241141339.png" alt="image-20221224114136235"></p>
<p>通用公式：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241141833.png" alt="image-20221224114150800"></p>
<p>十进制转二进制，我们可以用短除法来求，用十进制数不停的除以2，会得到一系列的余数，最后的商作为最高位，后面余数倒序排列便是二进制数。</p>
<p>下图以13转化为二进制为例，最右边的便是余数，左边不停的除以2，最后商0作为最高位，余数倒序排列，就是01101即1101</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241146061.png" alt="image-20221224114657017"></p>
<h4 id="二进制加法"><a href="#二进制加法" class="headerlink" title="二进制加法"></a>二进制加法</h4><p>二进制做加法，实际上和十进制一样，可以通过列竖式来求，只不过是满2进1。值得注意的是，在计算机里存储的数字，都是固定的长度。比如一个计算机用4位存储数字，相加到第4位时可能会产生进位，答案就是5位，我们就说它<strong>溢出</strong>了，如果答案也是4位，那就是成功执行。也就是说计算机里二进制加法有两种结果，要不溢出，要不成功执行。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241152755.png" alt="image-20221224115212713"></p>
<p>上图这样的竖式计算大家应该都不陌生，这是常用的纸笔计算方法。接下来我们的计算机做加法就是模仿这个流程，所以理解这种竖式计算法非常重要。</p>
<h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p>假设有一个4位的计算机，即里面的数字都是4位的，所以最多可以表示从0到二进制1111个数，也就是0到15一共16个数。可是现实生活中有<strong>正数和负数</strong>，这该如何表示？毕竟只有4位，那么我们可以把这16个数一部分表示正数，一部分表示负数，就像之前学习多通道mux时的思想，可以拿出最高位，如果为0就是正数，如果为1就是负数，这样16个数就分成了0xxx和1xxx两类。1000和0000都是0，这样就就能表示从-7到7的15个数。</p>
<p>我们称上述这种编码方式叫做<strong>原码</strong>表示法，可是原码表示法有个很大的缺点，就是符号必须单独处理，不能参与运算。有没有一种方法可以带着符号算呢？这就得看下面这种<strong>补码</strong>了，n位数x补码表示如下：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241206635.png" alt="image-20221224120636600"></p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241222934.png" alt="image-20221224122228897"></p>
<p>这个公式就很好的体现了补码的本质，其实是一种<strong>模运算</strong>，就像钟表上按环形排列的数字，最小的数和最大的数首尾相接形成一个环。用原码表示的时候最大的正数0111也就是7，如果带着最高位符号看的话，下一个数应该是1000，但是因为我们把符号单独定义了，所以7过后不是最小的数-7，而是0。补码表示法就很好的解决了这个问题，补码0111为7，带着符号看下一个数1000就是最小的数-8。相当于把0,1,2,3,4,5,6,7,-8,-7,-6,-5,-4,-3,-2,-1依次对应到0000到1111，实现了最大数和最小数的首尾相接。</p>
<p>观察上表可以发现一种转化为补码的<strong>简单方法</strong>。整数和0与原码表示一致，而负数可以<strong>取反加一</strong>，比如要计算-6这个数的四位补码，先把6转化为二进制0110，然后按位取反为1001，再加1，就是补码1010。</p>
<p><strong>为什么要用补码？</strong>用补码计算，你可以发现3+(-6)=0011+1010=1101也就是-3的补码。我们可以带着符号计算了！这和模运算的性质有关，可以自行去了解下。既然我们能直接用加法计算正负数，那么<strong>减法就可以转化为加法</strong>！而乘法也就是许多加法的叠加，除法是乘法的逆运算，所以我们只需要一个加法电路就可以完成所有的四则运算。正是因为补码的这种特性，现代计算机几乎都是用补码来表示数字。</p>
<p style="color:#888;background-color:lightyellow;padding:0px 10px;
border-left:4px #999 solid;">拓展：这里有个视频，通过倒推法来推导补码，可以加深理解：<a href="https://www.bilibili.com/video/BV16U4y1t7LD/?share_source=copy_web&vd_source=c0b7e2971676981be548dbddf193bcc9">『教程』补码怎么来的？</a></p>



<h3 id="二-加法器"><a href="#二-加法器" class="headerlink" title="二. 加法器"></a>二. 加法器</h3><p>接下来就要让计算机学会做加法了。先从二进制数的竖式入手，模仿列竖式加法的思路来设计电路。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241313313.png" alt="image-20221224131304266"></p>
<p>上面这个图展示了竖式运算的规律：</p>
<ul>
<li>竖式一位一位进行相加</li>
<li>每一位都会产生进位(没有进位就算进位是0)</li>
<li>最低两位计算时不考虑进位，从第二位开始的每一位都要考虑加上进位（每一位之间的关联就是这个进位）</li>
<li>因为计算机内数字的位数是恒定的，所以最高位的进位丢弃</li>
</ul>
<p>按照上述规律，我们也可以按位设计这个电路，每个位的计算都由一个芯片单独处理。</p>
<h4 id="半加器"><a href="#半加器" class="headerlink" title="半加器"></a>半加器</h4><p>先看最低位的加法，有两个输入：两个加数的最低位，有两个输出：结果和进位，已知输入输出就可以根据需要设计真值表，进而设计电路了，这样的电路我们称之为<strong>半加器</strong>。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241323340.png" alt="image-20221224132323292"></p>
<p>上述便是半加器的真值表，通过观察我们可以发现，carry进位其实就是与运算，而sum结果就是异或运算，因此可以直接给出hdl代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP HalfAdder &#123;</span><br><span class="line">    IN a, b;    // 1-bit inputs</span><br><span class="line">    OUT sum,    // Right bit of a + b </span><br><span class="line">        carry;  // Left bit of a + b</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">	And(a=a,b=b,out=carry);</span><br><span class="line">	Xor(a=a,b=b,out=sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全加器"><a href="#全加器" class="headerlink" title="全加器"></a>全加器</h4><p>然后是从第二位开始的高位，因为要考虑加上进位，所以有三个输入：两个加数的对应位和一个进位，依旧有两个输出：进位和结果。这样的电路我们称之为<strong>全加器</strong>，真值表如下：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241335415.png"></p>
<p>因为有三个变量不容易直接看出如何构建，我们可以根据真值表计算布尔表达式。这里也提供另一种思路，用两个半加器构建全加器(可能这就是为啥叫半加器和全加器的原因吧)。</p>
<p>三个变量相加，我们很自然的想到让其中两个输入一个半加器，然后输出的结果和第三个变量输入另一个半加器，按照半加器的原理，其实就是三个变量相异或，其结果也就是正确结果的最低位。两次半加器都有可能产生进位，只有三个变量中两个或三个为1才会有进位，所以两个半加器只要有进位1，整个全加器都会有进位1，只需要把两个半加器的进位端carry用或门连接即可，电路如下：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241348014.png"></p>
<h4 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h4><p>有了半加器和全加器，我们就有了计算每一位的手段，接下来就是把半加器和全加器组装起来，能够计算16位的二进制加法。根据前面竖式的规律，我们不难发现，连接这些半加器全加器的，是“进位”，因此我们可以把进位端连接起来，构成一个16位加法器。比如要把a[16]和b[16]相加，电路图如下：</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241353789.png" alt="image-20221224135318713"></p>
<p>就这样一步步把进位传递给下一个全加器，就实现了多位二进制数的按位加法计算。当然最后的进位carry可以不要。</p>
<p style="color:#888;background-color:lightyellow;padding:0px 10px;
border-left:4px #999 solid;">拓展：这种加法器实际上效率很低，因为每一位计算需要先拿到前一位的进位，因此书中提到了有一种进位预测的技术，可以大大加速运算过程。通过查阅资料，我发现这种加法器在中文语境下叫超前进位加法器，这里找到一个视频，通过布尔代数运算求出超前进位加法器的布尔表达式：<a href="https://www.bilibili.com/video/BV1N7411k7sb/?share_source=copy_web&vd_source=c0b7e2971676981be548dbddf193bcc9">动画：如何深入理解超前进位加法器 [manim制作]</a>，我们可以发现这种加法器把链式的结构转化为了一中扁平的结构，只需要少数几层的计算就能出结果，现代的加法器大多也用的这种</p>

<h4 id="增量器"><a href="#增量器" class="headerlink" title="增量器"></a>增量器</h4><p>书中还要求我们设计构建一种叫增量器的芯片，它的作用是让一个16位二进制数加一，这在后续的计算机构建中有重要作用。我们只需将16位加法器中的一个数换成000000000000001就行了。</p>
<h4 id="ALU算术逻辑单元"><a href="#ALU算术逻辑单元" class="headerlink" title="ALU算术逻辑单元"></a>ALU算术逻辑单元</h4><p>ALU可以说是整个计算机的核心部件，它负责做所有的运算操作。可以说ALU是一个多功能的运算器，不仅可以做算数运算，还可以做逻辑运算。由于ALU比较复杂，我们很难说去从头思考设计，所以我们先学习ALU需要满足哪些功能，然后再去构建它。幸运的是，ALU所需要的所有部件我们之前都造好了，只需要根据需求拼装即可。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241413007.png" alt="image-20221224141315938"></p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241413191.png" alt="image-20221224141331982"></p>
<p>ALU的需求十分复杂，但是不用慌，先来理清输入和输出。</p>
<p>我们可以看到ALU主要输入两个十六位二进制数，x和y，然后输出一个结果out。这也体现了ALU的功能，就是输入两个数，然后进行一种运算，然后输出结果。而其它的这么多输入，都是用来控制<strong>做什么运算</strong>的。下面来理一下输入：</p>
<ul>
<li>zx和zy：这两个控制输入是否置零，也就是对x和y单独进行处理。</li>
<li>nx和ny：这两个控制输入是否取反，也是对x和y的单独处理。</li>
<li>f：这一个输入控制做什么运算，这里有两种运算，and和add(相与和相加)。显然这里是把处理过后的x和y进行运算。</li>
<li>no：这个输入控制结果out是否取反，也就是对and或add的结果进行处理。</li>
</ul>
<p>有了上述分析，我们就有了思路，先对x和y分别进行处理，怎么处理由zx,zy,nx,ny来决定（涉及到选择，一定要活用mux逻辑门）。处理好之后的x和y再交由f决定是做add运算还是and运算，我们可以先用加法器和16位与门把两个运算都做了，再用mux选择哪一个输出。最后处理输出，no来决定是否用16位非门取反。</p>
<p>接下来看输出：</p>
<ul>
<li>out[16]：就是最后no选择后的值</li>
<li>zr：判断out是不是为0，一个比较好的方法是把每一位或起来，如果为0就是0，此处需要两个8通道或门Or8Way</li>
<li>ng：判断是不是小于零，前面学了补码知道最高位为1就是负数，所以直接把最高位连过来就成</li>
</ul>
<p>下面是代码参考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PARTS:</span><br><span class="line">	//对数据x进行处理</span><br><span class="line">	Mux16(a=x,b=false,sel=zx,out=xmux);</span><br><span class="line">	Not16(in=xmux,out=notx);</span><br><span class="line">	Mux16(a=xmux,b=notx,sel=nx,out=xout);</span><br><span class="line">	</span><br><span class="line">	//对数据y进行处理</span><br><span class="line">	Mux16(a=y,b=false,sel=zy,out=ymux);</span><br><span class="line">	Not16(in=ymux,out=noty);</span><br><span class="line">	Mux16(a=ymux,b=noty,sel=ny,out=yout);</span><br><span class="line">	</span><br><span class="line">	//选择对x和y做逻辑运算还是算数运算</span><br><span class="line">	And16(a=xout,b=yout,out=andout);</span><br><span class="line">	Add16(a=xout,b=yout,out=addout);</span><br><span class="line">	Mux16(a=andout,b=addout,sel=f,out=calout);</span><br><span class="line"></span><br><span class="line">	//选择输出是否取反</span><br><span class="line">	Not16(in=calout,out=notcalout);</span><br><span class="line">	Mux16(a=calout,b=notcalout,sel=no,out[0..7]=lowout,out[8..15]=highout,out[15]=ng,out=out);</span><br><span class="line"></span><br><span class="line">	//设置zr和ng输出</span><br><span class="line">	Or8Way(in=lowout,out=orout1);</span><br><span class="line">	Or8Way(in=highout,out=orout2);</span><br><span class="line">	Or(a=orout1,b=orout2,out=orout);</span><br><span class="line">	Not(in=orout,out=zr);</span><br></pre></td></tr></table></figure>

<p>你可能会想，ALU为什么这么设计呢，为什么ALU要先把x和y这么处理呢，为什么计算非要是add和and两种呢等等。你会发现我们的ALU除了两个数据，一共有6个控制信号的输入端，6位也就是可以表示64种不同的操作。下表为我们展示了最重要的18种操作，他们都是有具体的意义的。你会惊叹人类的智慧，通过对信号进行提前处理，就能把add和and两种运算算转化为多种其他的运算。</p>
<p><img src="https://mypic-1309350050.cos.ap-chongqing.myqcloud.com/img/202212241435075.png" alt="image-20221224143500012"></p>
<h4 id="开工-1"><a href="#开工-1" class="headerlink" title="开工"></a>开工</h4><p>现在打开文件夹<code>nand2tetris\projects\02</code>，找到里面的.hdl文件用顺手的文本编辑器打开，然后为里面的PARTS部分填空吧！</p>
<p>下面是我自己的工程链接：<a href="https://github.com/Heithon/nand2tetris-labs-and-notes/tree/main/02">第二章实验结果</a></p>
<h3 id="三-结语"><a href="#三-结语" class="headerlink" title="三.结语"></a>三.结语</h3><p>本章中我们创造了一个功能强大的计算单元ALU，但是它并不够强大，它还无法胜任除法，乘法，浮点数等运算。我们会在之后用软件的方式来实现这些运算（前面说过各种运算都是可以互相转化的）。因为本课程的设计原则是<strong>让ALU实现较少的功能，尽可能用软件拓展其他功能。</strong></p>
]]></content>
      <categories>
        <category>CS基础知识</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>课程笔记</tag>
        <tag>计算体系结构</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
</search>
